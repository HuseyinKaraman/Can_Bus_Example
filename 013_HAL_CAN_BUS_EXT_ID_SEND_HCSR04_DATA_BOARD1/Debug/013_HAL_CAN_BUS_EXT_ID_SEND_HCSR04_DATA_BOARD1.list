
013_HAL_CAN_BUS_EXT_ID_SEND_HCSR04_DATA_BOARD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800156c  0800156c  0001156c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001588  08001588  00011588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800158c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000a0  200000a0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000703d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000017e0  00000000  00000000  00027079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00001e2c  00000000  00000000  00028859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4b5  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bd7  00000000  00000000  0004a52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be286  00000000  00000000  00051104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f38a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ad8  00000000  00000000  0010f3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001554 	.word	0x08001554

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001554 	.word	0x08001554

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_InitTick+0x3c>)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
{
 80004c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c8:	7818      	ldrb	r0, [r3, #0]
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 faac 	bl	8000a34 <HAL_SYSTICK_Config>
 80004dc:	4604      	mov	r4, r0
 80004de:	b958      	cbnz	r0, 80004f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e0:	2d0f      	cmp	r5, #15
 80004e2:	d809      	bhi.n	80004f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e4:	4602      	mov	r2, r0
 80004e6:	4629      	mov	r1, r5
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f000 fa62 	bl	80009b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_InitTick+0x44>)
 80004f2:	4620      	mov	r0, r4
 80004f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7fc      	b.n	80004f6 <HAL_InitTick+0x36>
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000000 	.word	0x20000000
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 fa33 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f000 ff26 	bl	8001380 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_IncTick+0x14>)
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028

08000560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000560:	b538      	push	{r3, r4, r5, lr}
 8000562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff fff6 	bl	8000554 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000568:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf1c      	itt	ne
 800056c:	4b05      	ldrne	r3, [pc, #20]	; (8000584 <HAL_Delay+0x24>)
 800056e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000570:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000572:	bf18      	it	ne
 8000574:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000576:	f7ff ffed 	bl	8000554 <HAL_GetTick>
 800057a:	1b43      	subs	r3, r0, r5
 800057c:	42a3      	cmp	r3, r4
 800057e:	d3fa      	bcc.n	8000576 <HAL_Delay+0x16>
  {
  }
}
 8000580:	bd38      	pop	{r3, r4, r5, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800058a:	4604      	mov	r4, r0
 800058c:	2800      	cmp	r0, #0
 800058e:	d06e      	beq.n	800066e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000590:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000594:	b90b      	cbnz	r3, 800059a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000596:	f000 ff11 	bl	80013bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800059a:	6822      	ldr	r2, [r4, #0]
 800059c:	6813      	ldr	r3, [r2, #0]
 800059e:	f023 0302 	bic.w	r3, r3, #2
 80005a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005a4:	f7ff ffd6 	bl	8000554 <HAL_GetTick>
 80005a8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	0791      	lsls	r1, r2, #30
 80005b0:	d451      	bmi.n	8000656 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	f042 0201 	orr.w	r2, r2, #1
 80005b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005ba:	f7ff ffcb 	bl	8000554 <HAL_GetTick>
 80005be:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005c0:	6823      	ldr	r3, [r4, #0]
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	07d2      	lsls	r2, r2, #31
 80005c6:	d554      	bpl.n	8000672 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005c8:	7e22      	ldrb	r2, [r4, #24]
 80005ca:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	bf0c      	ite	eq
 80005d0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005d4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80005da:	7e62      	ldrb	r2, [r4, #25]
 80005dc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	bf0c      	ite	eq
 80005e2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005e6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80005ec:	7ea2      	ldrb	r2, [r4, #26]
 80005ee:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	bf0c      	ite	eq
 80005f4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005f8:	f022 0220 	bicne.w	r2, r2, #32
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80005fe:	7ee2      	ldrb	r2, [r4, #27]
 8000600:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	bf0c      	ite	eq
 8000606:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800060a:	f042 0210 	orrne.w	r2, r2, #16
 800060e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000610:	7f22      	ldrb	r2, [r4, #28]
 8000612:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	bf0c      	ite	eq
 8000618:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800061c:	f022 0208 	bicne.w	r2, r2, #8
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000622:	7f62      	ldrb	r2, [r4, #29]
 8000624:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	bf0c      	ite	eq
 800062a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800062e:	f022 0204 	bicne.w	r2, r2, #4
 8000632:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000634:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000638:	430a      	orrs	r2, r1
 800063a:	6921      	ldr	r1, [r4, #16]
 800063c:	430a      	orrs	r2, r1
 800063e:	6961      	ldr	r1, [r4, #20]
 8000640:	430a      	orrs	r2, r1
 8000642:	6861      	ldr	r1, [r4, #4]
 8000644:	3901      	subs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800064a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800064c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800064e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000650:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000654:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000656:	f7ff ff7d 	bl	8000554 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	280a      	cmp	r0, #10
 800065e:	d9a4      	bls.n	80005aa <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000666:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000668:	2305      	movs	r3, #5
 800066a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800066e:	2001      	movs	r0, #1
 8000670:	e7f0      	b.n	8000654 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000672:	f7ff ff6f 	bl	8000554 <HAL_GetTick>
 8000676:	1b40      	subs	r0, r0, r5
 8000678:	280a      	cmp	r0, #10
 800067a:	d9a1      	bls.n	80005c0 <HAL_CAN_Init+0x38>
 800067c:	e7f0      	b.n	8000660 <HAL_CAN_Init+0xd8>

0800067e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800067e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000680:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000684:	2b01      	cmp	r3, #1
{
 8000686:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000688:	b2dd      	uxtb	r5, r3
 800068a:	d120      	bne.n	80006ce <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800068c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800068e:	2302      	movs	r3, #2
 8000690:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800069c:	f7ff ff5a 	bl	8000554 <HAL_GetTick>
 80006a0:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f013 0301 	ands.w	r3, r3, #1
 80006aa:	d102      	bne.n	80006b2 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006ac:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006ae:	461d      	mov	r5, r3
 80006b0:	e00b      	b.n	80006ca <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006b2:	f7ff ff4f 	bl	8000554 <HAL_GetTick>
 80006b6:	1b80      	subs	r0, r0, r6
 80006b8:	280a      	cmp	r0, #10
 80006ba:	d9f2      	bls.n	80006a2 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80006c4:	2305      	movs	r3, #5
 80006c6:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80006ca:	4628      	mov	r0, r5
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006d4:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80006d6:	2501      	movs	r5, #1
 80006d8:	e7f7      	b.n	80006ca <HAL_CAN_Start+0x4c>

080006da <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80006da:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80006dc:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80006e0:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80006e2:	3d01      	subs	r5, #1
 80006e4:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80006e6:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80006e8:	d843      	bhi.n	8000772 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80006ea:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80006ee:	d03c      	beq.n	800076a <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006f0:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006f4:	2c03      	cmp	r4, #3
 80006f6:	f04f 0501 	mov.w	r5, #1
 80006fa:	d105      	bne.n	8000708 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80006fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000702:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000704:	2001      	movs	r0, #1
 8000706:	e02a      	b.n	800075e <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000708:	40a5      	lsls	r5, r4
 800070a:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800070c:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000710:	f104 0318 	add.w	r3, r4, #24
 8000714:	bb20      	cbnz	r0, 8000760 <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000716:	6808      	ldr	r0, [r1, #0]
 8000718:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000720:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8000724:	690d      	ldr	r5, [r1, #16]
 8000726:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800072a:	7d09      	ldrb	r1, [r1, #20]
 800072c:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800072e:	bf08      	it	eq
 8000730:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000734:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8000738:	bf04      	itt	eq
 800073a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800073e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000742:	4406      	add	r6, r0
 8000744:	6851      	ldr	r1, [r2, #4]
 8000746:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000750:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000754:	f042 0201 	orr.w	r2, r2, #1
 8000758:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800075c:	2000      	movs	r0, #0
  }
}
 800075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000760:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000762:	4338      	orrs	r0, r7
 8000764:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000768:	e7d8      	b.n	800071c <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800076a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000770:	e7c7      	b.n	8000702 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000772:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000778:	e7c3      	b.n	8000702 <HAL_CAN_AddTxMessage+0x28>

0800077a <HAL_CAN_TxMailbox0CompleteCallback>:
 800077a:	4770      	bx	lr

0800077c <HAL_CAN_TxMailbox1CompleteCallback>:
 800077c:	4770      	bx	lr

0800077e <HAL_CAN_TxMailbox2CompleteCallback>:
 800077e:	4770      	bx	lr

08000780 <HAL_CAN_TxMailbox0AbortCallback>:
 8000780:	4770      	bx	lr

08000782 <HAL_CAN_TxMailbox1AbortCallback>:
 8000782:	4770      	bx	lr

08000784 <HAL_CAN_TxMailbox2AbortCallback>:
 8000784:	4770      	bx	lr

08000786 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000786:	4770      	bx	lr

08000788 <HAL_CAN_RxFifo0FullCallback>:
 8000788:	4770      	bx	lr

0800078a <HAL_CAN_RxFifo1MsgPendingCallback>:
 800078a:	4770      	bx	lr

0800078c <HAL_CAN_RxFifo1FullCallback>:
 800078c:	4770      	bx	lr

0800078e <HAL_CAN_SleepCallback>:
 800078e:	4770      	bx	lr

08000790 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000790:	4770      	bx	lr

08000792 <HAL_CAN_ErrorCallback>:
 8000792:	4770      	bx	lr

08000794 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000798:	6803      	ldr	r3, [r0, #0]
 800079a:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800079c:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80007a0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80007a2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80007a6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80007aa:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80007ae:	f016 0401 	ands.w	r4, r6, #1
{
 80007b2:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80007b4:	d022      	beq.n	80007fc <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80007b6:	f017 0401 	ands.w	r4, r7, #1
 80007ba:	d007      	beq.n	80007cc <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80007bc:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80007be:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80007c0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80007c2:	f140 80a5 	bpl.w	8000910 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80007c6:	f7ff ffd8 	bl	800077a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80007ca:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80007cc:	05fb      	lsls	r3, r7, #23
 80007ce:	d509      	bpl.n	80007e4 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80007d6:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80007d8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80007da:	f140 80a7 	bpl.w	800092c <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80007de:	4628      	mov	r0, r5
 80007e0:	f7ff ffcc 	bl	800077c <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80007e4:	03fb      	lsls	r3, r7, #15
 80007e6:	d509      	bpl.n	80007fc <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80007e8:	682b      	ldr	r3, [r5, #0]
 80007ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007ee:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80007f0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007f2:	f140 80a9 	bpl.w	8000948 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007f6:	4628      	mov	r0, r5
 80007f8:	f7ff ffc1 	bl	800077e <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80007fc:	0733      	lsls	r3, r6, #28
 80007fe:	d507      	bpl.n	8000810 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000800:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000804:	bf1f      	itttt	ne
 8000806:	682b      	ldrne	r3, [r5, #0]
 8000808:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800080a:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800080e:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000810:	0777      	lsls	r7, r6, #29
 8000812:	d508      	bpl.n	8000826 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000814:	f01b 0f08 	tst.w	fp, #8
 8000818:	d005      	beq.n	8000826 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	2208      	movs	r2, #8
 800081e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000820:	4628      	mov	r0, r5
 8000822:	f7ff ffb1 	bl	8000788 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000826:	07b0      	lsls	r0, r6, #30
 8000828:	d506      	bpl.n	8000838 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800082a:	682b      	ldr	r3, [r5, #0]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	0799      	lsls	r1, r3, #30
 8000830:	d002      	beq.n	8000838 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000832:	4628      	mov	r0, r5
 8000834:	f7ff ffa7 	bl	8000786 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000838:	0672      	lsls	r2, r6, #25
 800083a:	d507      	bpl.n	800084c <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800083c:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000840:	bf1f      	itttt	ne
 8000842:	682b      	ldrne	r3, [r5, #0]
 8000844:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000846:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800084a:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800084c:	06b3      	lsls	r3, r6, #26
 800084e:	d508      	bpl.n	8000862 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000850:	f01a 0f08 	tst.w	sl, #8
 8000854:	d005      	beq.n	8000862 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000856:	682b      	ldr	r3, [r5, #0]
 8000858:	2208      	movs	r2, #8
 800085a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800085c:	4628      	mov	r0, r5
 800085e:	f7ff ff95 	bl	800078c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000862:	06f7      	lsls	r7, r6, #27
 8000864:	d506      	bpl.n	8000874 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000866:	682b      	ldr	r3, [r5, #0]
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	0798      	lsls	r0, r3, #30
 800086c:	d002      	beq.n	8000874 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800086e:	4628      	mov	r0, r5
 8000870:	f7ff ff8b 	bl	800078a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000874:	03b1      	lsls	r1, r6, #14
 8000876:	d508      	bpl.n	800088a <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000878:	f019 0f10 	tst.w	r9, #16
 800087c:	d005      	beq.n	800088a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800087e:	682b      	ldr	r3, [r5, #0]
 8000880:	2210      	movs	r2, #16
 8000882:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000884:	4628      	mov	r0, r5
 8000886:	f7ff ff82 	bl	800078e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800088a:	03f2      	lsls	r2, r6, #15
 800088c:	d508      	bpl.n	80008a0 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800088e:	f019 0f08 	tst.w	r9, #8
 8000892:	d005      	beq.n	80008a0 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000894:	682b      	ldr	r3, [r5, #0]
 8000896:	2208      	movs	r2, #8
 8000898:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800089a:	4628      	mov	r0, r5
 800089c:	f7ff ff78 	bl	8000790 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80008a0:	0433      	lsls	r3, r6, #16
 80008a2:	d52c      	bpl.n	80008fe <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80008a4:	f019 0f04 	tst.w	r9, #4
 80008a8:	682a      	ldr	r2, [r5, #0]
 80008aa:	d026      	beq.n	80008fa <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80008ac:	05f7      	lsls	r7, r6, #23
 80008ae:	d504      	bpl.n	80008ba <HAL_CAN_IRQHandler+0x126>
 80008b0:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80008b4:	bf18      	it	ne
 80008b6:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80008ba:	05b0      	lsls	r0, r6, #22
 80008bc:	d504      	bpl.n	80008c8 <HAL_CAN_IRQHandler+0x134>
 80008be:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80008c2:	bf18      	it	ne
 80008c4:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80008c8:	0571      	lsls	r1, r6, #21
 80008ca:	d504      	bpl.n	80008d6 <HAL_CAN_IRQHandler+0x142>
 80008cc:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80008d0:	bf18      	it	ne
 80008d2:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80008d6:	0533      	lsls	r3, r6, #20
 80008d8:	d50f      	bpl.n	80008fa <HAL_CAN_IRQHandler+0x166>
 80008da:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80008de:	d00c      	beq.n	80008fa <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80008e0:	2b40      	cmp	r3, #64	; 0x40
 80008e2:	d04f      	beq.n	8000984 <HAL_CAN_IRQHandler+0x1f0>
 80008e4:	d83e      	bhi.n	8000964 <HAL_CAN_IRQHandler+0x1d0>
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d046      	beq.n	8000978 <HAL_CAN_IRQHandler+0x1e4>
 80008ea:	2b30      	cmp	r3, #48	; 0x30
 80008ec:	d047      	beq.n	800097e <HAL_CAN_IRQHandler+0x1ea>
 80008ee:	2b10      	cmp	r3, #16
 80008f0:	d03f      	beq.n	8000972 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80008f2:	6993      	ldr	r3, [r2, #24]
 80008f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008f8:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80008fa:	2304      	movs	r3, #4
 80008fc:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80008fe:	b12c      	cbz	r4, 800090c <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000900:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000902:	431c      	orrs	r4, r3
 8000904:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000906:	4628      	mov	r0, r5
 8000908:	f7ff ff43 	bl	8000792 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800090c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000910:	077a      	lsls	r2, r7, #29
 8000912:	d405      	bmi.n	8000920 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000914:	f017 0408 	ands.w	r4, r7, #8
 8000918:	d105      	bne.n	8000926 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800091a:	f7ff ff31 	bl	8000780 <HAL_CAN_TxMailbox0AbortCallback>
 800091e:	e755      	b.n	80007cc <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000920:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000924:	e752      	b.n	80007cc <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000926:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800092a:	e74f      	b.n	80007cc <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800092c:	0579      	lsls	r1, r7, #21
 800092e:	d502      	bpl.n	8000936 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000930:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000934:	e756      	b.n	80007e4 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000936:	053a      	lsls	r2, r7, #20
 8000938:	d502      	bpl.n	8000940 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800093a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800093e:	e751      	b.n	80007e4 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000940:	4628      	mov	r0, r5
 8000942:	f7ff ff1e 	bl	8000782 <HAL_CAN_TxMailbox1AbortCallback>
 8000946:	e74d      	b.n	80007e4 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000948:	0379      	lsls	r1, r7, #13
 800094a:	d502      	bpl.n	8000952 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800094c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000950:	e754      	b.n	80007fc <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000952:	033a      	lsls	r2, r7, #12
 8000954:	d502      	bpl.n	800095c <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000956:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800095a:	e74f      	b.n	80007fc <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800095c:	4628      	mov	r0, r5
 800095e:	f7ff ff11 	bl	8000784 <HAL_CAN_TxMailbox2AbortCallback>
 8000962:	e74b      	b.n	80007fc <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000964:	2b50      	cmp	r3, #80	; 0x50
 8000966:	d010      	beq.n	800098a <HAL_CAN_IRQHandler+0x1f6>
 8000968:	2b60      	cmp	r3, #96	; 0x60
 800096a:	d1c2      	bne.n	80008f2 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800096c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000970:	e7bf      	b.n	80008f2 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000972:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000976:	e7bc      	b.n	80008f2 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000978:	f044 0410 	orr.w	r4, r4, #16
            break;
 800097c:	e7b9      	b.n	80008f2 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800097e:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000982:	e7b6      	b.n	80008f2 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000984:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000988:	e7b3      	b.n	80008f2 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 800098a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800098e:	e7b0      	b.n	80008f2 <HAL_CAN_IRQHandler+0x15e>

08000990 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000992:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000994:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000998:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b6:	b530      	push	{r4, r5, lr}
 80009b8:	68dc      	ldr	r4, [r3, #12]
 80009ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	2d04      	cmp	r5, #4
 80009c6:	bf28      	it	cs
 80009c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d0:	bf8c      	ite	hi
 80009d2:	3c03      	subhi	r4, #3
 80009d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d6:	fa03 f505 	lsl.w	r5, r3, r5
 80009da:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009de:	40a3      	lsls	r3, r4
 80009e0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80009e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	bfac      	ite	ge
 80009ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	4a08      	ldrlt	r2, [pc, #32]	; (8000a14 <HAL_NVIC_SetPriority+0x60>)
 80009f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80009f8:	bfb8      	it	lt
 80009fa:	f000 000f 	andlt.w	r0, r0, #15
 80009fe:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	bfaa      	itet	ge
 8000a02:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	e000ed14 	.word	0xe000ed14

08000a18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	db08      	blt.n	8000a2e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1c:	0942      	lsrs	r2, r0, #5
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f000 001f 	and.w	r0, r0, #31
 8000a24:	fa03 f000 	lsl.w	r0, r3, r0
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <HAL_NVIC_EnableIRQ+0x18>)
 8000a2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	3801      	subs	r0, #1
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d20a      	bcs.n	8000a52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a40:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	21f0      	movs	r1, #240	; 0xf0
 8000a44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8000c10 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a68:	4a67      	ldr	r2, [pc, #412]	; (8000c08 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a6a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000a6e:	2401      	movs	r4, #1
 8000a70:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a72:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000a76:	43ac      	bics	r4, r5
 8000a78:	f040 80b0 	bne.w	8000bdc <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a7c:	684d      	ldr	r5, [r1, #4]
 8000a7e:	f005 0403 	and.w	r4, r5, #3
 8000a82:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000a86:	2603      	movs	r6, #3
 8000a88:	1e67      	subs	r7, r4, #1
 8000a8a:	fa06 f608 	lsl.w	r6, r6, r8
 8000a8e:	2f01      	cmp	r7, #1
 8000a90:	ea6f 0606 	mvn.w	r6, r6
 8000a94:	d834      	bhi.n	8000b00 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000a96:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a98:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a9c:	68cf      	ldr	r7, [r1, #12]
 8000a9e:	fa07 f708 	lsl.w	r7, r7, r8
 8000aa2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000aa6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aa8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aaa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aae:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000ab2:	409f      	lsls	r7, r3
 8000ab4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ab8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000aba:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000abc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac0:	688f      	ldr	r7, [r1, #8]
 8000ac2:	fa07 f708 	lsl.w	r7, r7, r8
 8000ac6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aca:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000acc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	d119      	bne.n	8000b04 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000ad0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ad4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000adc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ae0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ae4:	f04f 0e0f 	mov.w	lr, #15
 8000ae8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000aec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000af0:	690f      	ldr	r7, [r1, #16]
 8000af2:	fa07 f70b 	lsl.w	r7, r7, fp
 8000af6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000afa:	f8ca 7020 	str.w	r7, [sl, #32]
 8000afe:	e001      	b.n	8000b04 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b00:	2c03      	cmp	r4, #3
 8000b02:	d1da      	bne.n	8000aba <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000b04:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b06:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b0a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b0c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8000b10:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b12:	d563      	bpl.n	8000bdc <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b14:	f04f 0a00 	mov.w	sl, #0
 8000b18:	f8cd a004 	str.w	sl, [sp, #4]
 8000b1c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b20:	4c3a      	ldr	r4, [pc, #232]	; (8000c0c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b26:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000b2a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000b2e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b32:	9601      	str	r6, [sp, #4]
 8000b34:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b36:	f023 0603 	bic.w	r6, r3, #3
 8000b3a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b3e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b42:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b46:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b4e:	270f      	movs	r7, #15
 8000b50:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b54:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b56:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5a:	d046      	beq.n	8000bea <HAL_GPIO_Init+0x18a>
 8000b5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b60:	42a0      	cmp	r0, r4
 8000b62:	d044      	beq.n	8000bee <HAL_GPIO_Init+0x18e>
 8000b64:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d042      	beq.n	8000bf2 <HAL_GPIO_Init+0x192>
 8000b6c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b70:	42a0      	cmp	r0, r4
 8000b72:	d040      	beq.n	8000bf6 <HAL_GPIO_Init+0x196>
 8000b74:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b78:	42a0      	cmp	r0, r4
 8000b7a:	d03e      	beq.n	8000bfa <HAL_GPIO_Init+0x19a>
 8000b7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b80:	42a0      	cmp	r0, r4
 8000b82:	d03c      	beq.n	8000bfe <HAL_GPIO_Init+0x19e>
 8000b84:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b88:	42a0      	cmp	r0, r4
 8000b8a:	d03a      	beq.n	8000c02 <HAL_GPIO_Init+0x1a2>
 8000b8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b90:	42a0      	cmp	r0, r4
 8000b92:	bf0c      	ite	eq
 8000b94:	2407      	moveq	r4, #7
 8000b96:	2408      	movne	r4, #8
 8000b98:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b9c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b9e:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8000ba0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba6:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000ba8:	bf54      	ite	pl
 8000baa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bac:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000bb0:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8000bb2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	bf54      	ite	pl
 8000bb8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bba:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000bbe:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc2:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	bf54      	ite	pl
 8000bc6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bc8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000bcc:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000bce:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd0:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	bf54      	ite	pl
 8000bd4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bd6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000bda:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bdc:	3301      	adds	r3, #1
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	f47f af44 	bne.w	8000a6c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000be4:	b003      	add	sp, #12
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bea:	4654      	mov	r4, sl
 8000bec:	e7d4      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000bee:	2401      	movs	r4, #1
 8000bf0:	e7d2      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000bf2:	2402      	movs	r4, #2
 8000bf4:	e7d0      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000bf6:	2403      	movs	r4, #3
 8000bf8:	e7ce      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000bfa:	2404      	movs	r4, #4
 8000bfc:	e7cc      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000bfe:	2405      	movs	r4, #5
 8000c00:	e7ca      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000c02:	2406      	movs	r4, #6
 8000c04:	e7c8      	b.n	8000b98 <HAL_GPIO_Init+0x138>
 8000c06:	bf00      	nop
 8000c08:	40013c00 	.word	0x40013c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c14:	6903      	ldr	r3, [r0, #16]
 8000c16:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c18:	bf14      	ite	ne
 8000c1a:	2001      	movne	r0, #1
 8000c1c:	2000      	moveq	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c20:	b10a      	cbz	r2, 8000c26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c22:	6181      	str	r1, [r0, #24]
  }
}
 8000c24:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c26:	0409      	lsls	r1, r1, #16
 8000c28:	e7fb      	b.n	8000c22 <HAL_GPIO_WritePin+0x2>
	...

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c30:	4604      	mov	r4, r0
 8000c32:	b340      	cbz	r0, 8000c86 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c34:	6803      	ldr	r3, [r0, #0]
 8000c36:	07dd      	lsls	r5, r3, #31
 8000c38:	d410      	bmi.n	8000c5c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	0798      	lsls	r0, r3, #30
 8000c3e:	d45e      	bmi.n	8000cfe <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	071a      	lsls	r2, r3, #28
 8000c44:	f100 80a0 	bmi.w	8000d88 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	075b      	lsls	r3, r3, #29
 8000c4c:	f100 80be 	bmi.w	8000dcc <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c50:	69a0      	ldr	r0, [r4, #24]
 8000c52:	2800      	cmp	r0, #0
 8000c54:	f040 811f 	bne.w	8000e96 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e02b      	b.n	8000cb4 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c5c:	4ba6      	ldr	r3, [pc, #664]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	f002 020c 	and.w	r2, r2, #12
 8000c64:	2a04      	cmp	r2, #4
 8000c66:	d007      	beq.n	8000c78 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6e:	2a08      	cmp	r2, #8
 8000c70:	d10b      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	0251      	lsls	r1, r2, #9
 8000c76:	d508      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	4b9f      	ldr	r3, [pc, #636]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	039a      	lsls	r2, r3, #14
 8000c7e:	d5dc      	bpl.n	8000c3a <HAL_RCC_OscConfig+0xe>
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1d9      	bne.n	8000c3a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
 8000c88:	e014      	b.n	8000cb4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8a:	6862      	ldr	r2, [r4, #4]
 8000c8c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000c90:	d113      	bne.n	8000cba <HAL_RCC_OscConfig+0x8e>
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fc5b 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	4e96      	ldr	r6, [pc, #600]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000ca0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	6833      	ldr	r3, [r6, #0]
 8000ca4:	039b      	lsls	r3, r3, #14
 8000ca6:	d4c8      	bmi.n	8000c3a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fc54 	bl	8000554 <HAL_GetTick>
 8000cac:	1b40      	subs	r0, r0, r5
 8000cae:	2864      	cmp	r0, #100	; 0x64
 8000cb0:	d9f7      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000cb2:	2003      	movs	r0, #3
}
 8000cb4:	b002      	add	sp, #8
 8000cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cba:	4d8f      	ldr	r5, [pc, #572]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000cbc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	d107      	bne.n	8000cd4 <HAL_RCC_OscConfig+0xa8>
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	602b      	str	r3, [r5, #0]
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd2:	e7e2      	b.n	8000c9a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d1d9      	bne.n	8000c9a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fc35 	bl	8000554 <HAL_GetTick>
 8000cea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	039f      	lsls	r7, r3, #14
 8000cf0:	d5a3      	bpl.n	8000c3a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf2:	f7ff fc2f 	bl	8000554 <HAL_GetTick>
 8000cf6:	1b80      	subs	r0, r0, r6
 8000cf8:	2864      	cmp	r0, #100	; 0x64
 8000cfa:	d9f7      	bls.n	8000cec <HAL_RCC_OscConfig+0xc0>
 8000cfc:	e7d9      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfe:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	f012 0f0c 	tst.w	r2, #12
 8000d06:	d007      	beq.n	8000d18 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d0e:	2a08      	cmp	r2, #8
 8000d10:	d111      	bne.n	8000d36 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	025e      	lsls	r6, r3, #9
 8000d16:	d40e      	bmi.n	8000d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d18:	4b77      	ldr	r3, [pc, #476]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	0795      	lsls	r5, r2, #30
 8000d1e:	d502      	bpl.n	8000d26 <HAL_RCC_OscConfig+0xfa>
 8000d20:	68e2      	ldr	r2, [r4, #12]
 8000d22:	2a01      	cmp	r2, #1
 8000d24:	d1af      	bne.n	8000c86 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	6921      	ldr	r1, [r4, #16]
 8000d2a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d2e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d34:	e784      	b.n	8000c40 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d36:	68e2      	ldr	r2, [r4, #12]
 8000d38:	4b70      	ldr	r3, [pc, #448]	; (8000efc <HAL_RCC_OscConfig+0x2d0>)
 8000d3a:	b1b2      	cbz	r2, 8000d6a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc08 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4d6c      	ldr	r5, [pc, #432]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000d46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	0798      	lsls	r0, r3, #30
 8000d4c:	d507      	bpl.n	8000d5e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4e:	682b      	ldr	r3, [r5, #0]
 8000d50:	6922      	ldr	r2, [r4, #16]
 8000d52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d5a:	602b      	str	r3, [r5, #0]
 8000d5c:	e770      	b.n	8000c40 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fbf9 	bl	8000554 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	2802      	cmp	r0, #2
 8000d66:	d9ef      	bls.n	8000d48 <HAL_RCC_OscConfig+0x11c>
 8000d68:	e7a3      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fbf2 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d70:	4e61      	ldr	r6, [pc, #388]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000d72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d74:	6833      	ldr	r3, [r6, #0]
 8000d76:	0799      	lsls	r1, r3, #30
 8000d78:	f57f af62 	bpl.w	8000c40 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fbea 	bl	8000554 <HAL_GetTick>
 8000d80:	1b40      	subs	r0, r0, r5
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9f6      	bls.n	8000d74 <HAL_RCC_OscConfig+0x148>
 8000d86:	e794      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d88:	6962      	ldr	r2, [r4, #20]
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <HAL_RCC_OscConfig+0x2d4>)
 8000d8c:	b17a      	cbz	r2, 8000dae <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d92:	f7ff fbdf 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	4e58      	ldr	r6, [pc, #352]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000d98:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000d9c:	079f      	lsls	r7, r3, #30
 8000d9e:	f53f af53 	bmi.w	8000c48 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da2:	f7ff fbd7 	bl	8000554 <HAL_GetTick>
 8000da6:	1b40      	subs	r0, r0, r5
 8000da8:	2802      	cmp	r0, #2
 8000daa:	d9f6      	bls.n	8000d9a <HAL_RCC_OscConfig+0x16e>
 8000dac:	e781      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000dae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000db0:	f7ff fbd0 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db4:	4e50      	ldr	r6, [pc, #320]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000db6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000dba:	0798      	lsls	r0, r3, #30
 8000dbc:	f57f af44 	bpl.w	8000c48 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fbc8 	bl	8000554 <HAL_GetTick>
 8000dc4:	1b40      	subs	r0, r0, r5
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x18c>
 8000dca:	e772      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000dd4:	d128      	bne.n	8000e28 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	9201      	str	r2, [sp, #4]
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dde:	641a      	str	r2, [r3, #64]	; 0x40
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dea:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dec:	4d45      	ldr	r5, [pc, #276]	; (8000f04 <HAL_RCC_OscConfig+0x2d8>)
 8000dee:	682b      	ldr	r3, [r5, #0]
 8000df0:	05d9      	lsls	r1, r3, #23
 8000df2:	d51b      	bpl.n	8000e2c <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df4:	68a3      	ldr	r3, [r4, #8]
 8000df6:	4d40      	ldr	r5, [pc, #256]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d127      	bne.n	8000e4c <HAL_RCC_OscConfig+0x220>
 8000dfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e04:	f7ff fba6 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e08:	4e3b      	ldr	r6, [pc, #236]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000e0a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e10:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000e12:	079b      	lsls	r3, r3, #30
 8000e14:	d539      	bpl.n	8000e8a <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8000e16:	2f00      	cmp	r7, #0
 8000e18:	f43f af1a 	beq.w	8000c50 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e1c:	4a36      	ldr	r2, [pc, #216]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000e1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	e713      	b.n	8000c50 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e7df      	b.n	8000dec <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e34:	f7ff fb8e 	bl	8000554 <HAL_GetTick>
 8000e38:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	05da      	lsls	r2, r3, #23
 8000e3e:	d4d9      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e40:	f7ff fb88 	bl	8000554 <HAL_GetTick>
 8000e44:	1b80      	subs	r0, r0, r6
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f7      	bls.n	8000e3a <HAL_RCC_OscConfig+0x20e>
 8000e4a:	e732      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d104      	bne.n	8000e5a <HAL_RCC_OscConfig+0x22e>
 8000e50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	672b      	str	r3, [r5, #112]	; 0x70
 8000e58:	e7d0      	b.n	8000dfc <HAL_RCC_OscConfig+0x1d0>
 8000e5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e5c:	f022 0201 	bic.w	r2, r2, #1
 8000e60:	672a      	str	r2, [r5, #112]	; 0x70
 8000e62:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e64:	f022 0204 	bic.w	r2, r2, #4
 8000e68:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1ca      	bne.n	8000e04 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fb71 	bl	8000554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e7a:	0798      	lsls	r0, r3, #30
 8000e7c:	d5cb      	bpl.n	8000e16 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fb69 	bl	8000554 <HAL_GetTick>
 8000e82:	1b80      	subs	r0, r0, r6
 8000e84:	4540      	cmp	r0, r8
 8000e86:	d9f7      	bls.n	8000e78 <HAL_RCC_OscConfig+0x24c>
 8000e88:	e713      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fb63 	bl	8000554 <HAL_GetTick>
 8000e8e:	1b40      	subs	r0, r0, r5
 8000e90:	4540      	cmp	r0, r8
 8000e92:	d9bd      	bls.n	8000e10 <HAL_RCC_OscConfig+0x1e4>
 8000e94:	e70d      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e96:	4d18      	ldr	r5, [pc, #96]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
 8000e98:	68ab      	ldr	r3, [r5, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d047      	beq.n	8000f32 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ea2:	4e19      	ldr	r6, [pc, #100]	; (8000f08 <HAL_RCC_OscConfig+0x2dc>)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ea8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eaa:	d135      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000eac:	f7ff fb52 	bl	8000554 <HAL_GetTick>
 8000eb0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	0199      	lsls	r1, r3, #6
 8000eb6:	d429      	bmi.n	8000f0c <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eb8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ec0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ec6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000eca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ecc:	0852      	lsrs	r2, r2, #1
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ed4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000eda:	f7ff fb3b 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ede:	4d06      	ldr	r5, [pc, #24]	; (8000ef8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000ee0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	019a      	lsls	r2, r3, #6
 8000ee6:	f53f aeb7 	bmi.w	8000c58 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eea:	f7ff fb33 	bl	8000554 <HAL_GetTick>
 8000eee:	1b00      	subs	r0, r0, r4
 8000ef0:	2802      	cmp	r0, #2
 8000ef2:	d9f6      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2b6>
 8000ef4:	e6dd      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	42470000 	.word	0x42470000
 8000f00:	42470e80 	.word	0x42470e80
 8000f04:	40007000 	.word	0x40007000
 8000f08:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0c:	f7ff fb22 	bl	8000554 <HAL_GetTick>
 8000f10:	1bc0      	subs	r0, r0, r7
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d9cd      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x286>
 8000f16:	e6cc      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000f18:	f7ff fb1c 	bl	8000554 <HAL_GetTick>
 8000f1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	f57f ae99 	bpl.w	8000c58 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f26:	f7ff fb15 	bl	8000554 <HAL_GetTick>
 8000f2a:	1b00      	subs	r0, r0, r4
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f6      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
 8000f30:	e6bf      	b.n	8000cb2 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f32:	2801      	cmp	r0, #1
 8000f34:	f43f aebe 	beq.w	8000cb4 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000f38:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f3a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f40:	4291      	cmp	r1, r2
 8000f42:	f47f aea0 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f46:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	f47f ae9a 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f52:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f54:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000f58:	401a      	ands	r2, r3
 8000f5a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000f5e:	f47f ae92 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f64:	0852      	lsrs	r2, r2, #1
 8000f66:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000f6a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f6c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000f70:	f47f ae89 	bne.w	8000c86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f76:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f7a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000f7e:	f43f ae6b 	beq.w	8000c58 <HAL_RCC_OscConfig+0x2c>
 8000f82:	e680      	b.n	8000c86 <HAL_RCC_OscConfig+0x5a>

08000f84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f84:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000f86:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f88:	688b      	ldr	r3, [r1, #8]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d01c      	beq.n	8000fcc <HAL_RCC_GetSysClockFreq+0x48>
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d11c      	bne.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f96:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f98:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f9a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa0:	bf14      	ite	ne
 8000fa2:	480d      	ldrne	r0, [pc, #52]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa4:	480d      	ldreq	r0, [pc, #52]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000faa:	bf18      	it	ne
 8000fac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb2:	fba1 0100 	umull	r0, r1, r1, r0
 8000fb6:	f7ff f907 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000fc6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fca:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x54>)
 8000fce:	e7fc      	b.n	8000fca <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000fd2:	e7fa      	b.n	8000fca <HAL_RCC_GetSysClockFreq+0x46>
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	007a1200 	.word	0x007a1200
 8000fdc:	00f42400 	.word	0x00f42400

08000fe0 <HAL_RCC_ClockConfig>:
{
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	b910      	cbnz	r0, 8000ff0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
}
 8000fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff0:	4b44      	ldr	r3, [pc, #272]	; (8001104 <HAL_RCC_ClockConfig+0x124>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	f002 0207 	and.w	r2, r2, #7
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d328      	bcc.n	800104e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffc:	6822      	ldr	r2, [r4, #0]
 8000ffe:	0797      	lsls	r7, r2, #30
 8001000:	d42d      	bmi.n	800105e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001002:	07d0      	lsls	r0, r2, #31
 8001004:	d441      	bmi.n	800108a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_RCC_ClockConfig+0x124>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	f002 0207 	and.w	r2, r2, #7
 800100e:	42aa      	cmp	r2, r5
 8001010:	d866      	bhi.n	80010e0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001012:	6822      	ldr	r2, [r4, #0]
 8001014:	0751      	lsls	r1, r2, #29
 8001016:	d46c      	bmi.n	80010f2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001018:	0713      	lsls	r3, r2, #28
 800101a:	d507      	bpl.n	800102c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800101c:	4a3a      	ldr	r2, [pc, #232]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800101e:	6921      	ldr	r1, [r4, #16]
 8001020:	6893      	ldr	r3, [r2, #8]
 8001022:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001026:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800102a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800102c:	f7ff ffaa 	bl	8000f84 <HAL_RCC_GetSysClockFreq>
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 8001032:	4a36      	ldr	r2, [pc, #216]	; (800110c <HAL_RCC_ClockConfig+0x12c>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	40d8      	lsrs	r0, r3
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_RCC_ClockConfig+0x130>)
 8001040:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <HAL_RCC_ClockConfig+0x134>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f7ff fa3b 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	e7ce      	b.n	8000fec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	428b      	cmp	r3, r1
 800105a:	d1c6      	bne.n	8000fea <HAL_RCC_ClockConfig+0xa>
 800105c:	e7ce      	b.n	8000ffc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 8001060:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	bf1e      	ittt	ne
 8001066:	6899      	ldrne	r1, [r3, #8]
 8001068:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800106c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001070:	bf42      	ittt	mi
 8001072:	6899      	ldrmi	r1, [r3, #8]
 8001074:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001078:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800107a:	4923      	ldr	r1, [pc, #140]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800107c:	68a0      	ldr	r0, [r4, #8]
 800107e:	688b      	ldr	r3, [r1, #8]
 8001080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001084:	4303      	orrs	r3, r0
 8001086:	608b      	str	r3, [r1, #8]
 8001088:	e7bb      	b.n	8001002 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	6862      	ldr	r2, [r4, #4]
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800108e:	2a01      	cmp	r2, #1
 8001090:	d11c      	bne.n	80010cc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	d0a7      	beq.n	8000fea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109a:	4e1b      	ldr	r6, [pc, #108]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800109c:	68b3      	ldr	r3, [r6, #8]
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010a6:	f7ff fa55 	bl	8000554 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b0:	68b3      	ldr	r3, [r6, #8]
 80010b2:	6862      	ldr	r2, [r4, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010bc:	d0a3      	beq.n	8001006 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010be:	f7ff fa49 	bl	8000554 <HAL_GetTick>
 80010c2:	1bc0      	subs	r0, r0, r7
 80010c4:	4540      	cmp	r0, r8
 80010c6:	d9f3      	bls.n	80010b0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80010c8:	2003      	movs	r0, #3
 80010ca:	e78f      	b.n	8000fec <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010cc:	1e91      	subs	r1, r2, #2
 80010ce:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d2:	d802      	bhi.n	80010da <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010d8:	e7de      	b.n	8001098 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	f013 0f02 	tst.w	r3, #2
 80010de:	e7db      	b.n	8001098 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e0:	b2ea      	uxtb	r2, r5
 80010e2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	42ab      	cmp	r3, r5
 80010ec:	f47f af7d 	bne.w	8000fea <HAL_RCC_ClockConfig+0xa>
 80010f0:	e78f      	b.n	8001012 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f2:	4905      	ldr	r1, [pc, #20]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 80010f4:	68e0      	ldr	r0, [r4, #12]
 80010f6:	688b      	ldr	r3, [r1, #8]
 80010f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010fc:	4303      	orrs	r3, r0
 80010fe:	608b      	str	r3, [r1, #8]
 8001100:	e78a      	b.n	8001018 <HAL_RCC_ClockConfig+0x38>
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00
 8001108:	40023800 	.word	0x40023800
 800110c:	0800156c 	.word	0x0800156c
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001118:	4b01      	ldr	r3, [pc, #4]	; (8001120 <HAL_RCC_GetHCLKFreq+0x8>)
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <DWT_Delay_Init+0x38>)
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800112c:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001134:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <DWT_Delay_Init+0x3c>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800114c:	bf00      	nop
     __ASM volatile ("NOP");
 800114e:	bf00      	nop
  __ASM volatile ("NOP");
 8001150:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001152:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 8001154:	fab0 f080 	clz	r0, r0
 8001158:	0940      	lsrs	r0, r0, #5
 800115a:	4770      	bx	lr
 800115c:	e000edf0 	.word	0xe000edf0
 8001160:	e0001000 	.word	0xe0001000

08001164 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001164:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001166:	4c09      	ldr	r4, [pc, #36]	; (800118c <DWT_Delay_us+0x28>)
{
 8001168:	9001      	str	r0, [sp, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800116a:	6865      	ldr	r5, [r4, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800116c:	f7ff ffd4 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <DWT_Delay_us+0x2c>)
 8001174:	fbb0 f0f2 	udiv	r0, r0, r2
 8001178:	4343      	muls	r3, r0
 800117a:	9301      	str	r3, [sp, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	9a01      	ldr	r2, [sp, #4]
 8001180:	1b5b      	subs	r3, r3, r5
 8001182:	4293      	cmp	r3, r2
 8001184:	d3fa      	bcc.n	800117c <DWT_Delay_us+0x18>
}
 8001186:	b003      	add	sp, #12
 8001188:	bd30      	pop	{r4, r5, pc}
 800118a:	bf00      	nop
 800118c:	e0001000 	.word	0xe0001000
 8001190:	000f4240 	.word	0x000f4240

08001194 <Read_HCSR04>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
/* USER CODE BEGIN PFP */
uint32_t Read_HCSR04()
{
 8001194:	b538      	push	{r3, r4, r5, lr}

	uint32_t local_time = 0;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2102      	movs	r1, #2
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <Read_HCSR04+0x48>)
	DWT_Delay_us(10);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

	while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2));
 800119c:	4c0f      	ldr	r4, [pc, #60]	; (80011dc <Read_HCSR04+0x48>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800119e:	f7ff fd3f 	bl	8000c20 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff ffde 	bl	8001164 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <Read_HCSR04+0x48>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	2102      	movs	r1, #2
 80011ae:	f7ff fd37 	bl	8000c20 <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2));
 80011b2:	2104      	movs	r1, #4
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fd2d 	bl	8000c14 <HAL_GPIO_ReadPin>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d0f9      	beq.n	80011b2 <Read_HCSR04+0x1e>
	// aktif olana kadar bekle

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) // Aktif oldugu süreyi hesaplayalım
 80011be:	4d07      	ldr	r5, [pc, #28]	; (80011dc <Read_HCSR04+0x48>)
	uint32_t local_time = 0;
 80011c0:	2400      	movs	r4, #0
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) // Aktif oldugu süreyi hesaplayalım
 80011c2:	2104      	movs	r1, #4
 80011c4:	4628      	mov	r0, r5
 80011c6:	f7ff fd25 	bl	8000c14 <HAL_GPIO_ReadPin>
 80011ca:	b908      	cbnz	r0, 80011d0 <Read_HCSR04+0x3c>
		DWT_Delay_us(1); // 1 er us'lik geçikmelerle artıralım.

	}

	return local_time * 2; // bi gitme bi gelme süresi var :) * 2
}
 80011cc:	0060      	lsls	r0, r4, #1
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
		DWT_Delay_us(1); // 1 er us'lik geçikmelerle artıralım.
 80011d0:	2001      	movs	r0, #1
		local_time++;
 80011d2:	3401      	adds	r4, #1
		DWT_Delay_us(1); // 1 er us'lik geçikmelerle artıralım.
 80011d4:	f7ff ffc6 	bl	8001164 <DWT_Delay_us>
 80011d8:	e7f3      	b.n	80011c2 <Read_HCSR04+0x2e>
 80011da:	bf00      	nop
 80011dc:	40020000 	.word	0x40020000

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b530      	push	{r4, r5, lr}
 80011e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e4:	2210      	movs	r2, #16
 80011e6:	2100      	movs	r1, #0
 80011e8:	a80a      	add	r0, sp, #40	; 0x28
 80011ea:	f000 f9ab 	bl	8001544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ee:	2100      	movs	r1, #0
 80011f0:	2214      	movs	r2, #20
 80011f2:	a803      	add	r0, sp, #12
 80011f4:	f000 f9a6 	bl	8001544 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2400      	movs	r4, #0
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <SystemClock_Config+0x8c>)
 80011fc:	9401      	str	r4, [sp, #4]
 80011fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001200:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <SystemClock_Config+0x90>)
 8001212:	9402      	str	r4, [sp, #8]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001230:	2502      	movs	r5, #2
 8001232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001236:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001238:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 800123e:	2304      	movs	r3, #4
 8001240:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001244:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f7ff fcf0 	bl	8000c2c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001252:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125a:	e9cd 1306 	strd	r1, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800125e:	a803      	add	r0, sp, #12
 8001260:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001264:	f7ff febc 	bl	8000fe0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001268:	b015      	add	sp, #84	; 0x54
 800126a:	bd30      	pop	{r4, r5, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <main>:
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
  HAL_Init();
 8001278:	f7ff f946 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 800127c:	f7ff ffb0 	bl	80011e0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	2214      	movs	r2, #20
 8001282:	2100      	movs	r1, #0
 8001284:	a803      	add	r0, sp, #12
 8001286:	f000 f95d 	bl	8001544 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2400      	movs	r4, #0
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <main+0xe8>)
 800128e:	9400      	str	r4, [sp, #0]
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <main+0xec>)
  hcan1.Instance = CAN1;
 8001294:	4d33      	ldr	r5, [pc, #204]	; (8001364 <main+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
 800129c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	9401      	str	r4, [sp, #4]
 80012a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
 80012b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b2:	f002 0201 	and.w	r2, r2, #1
 80012b6:	9201      	str	r2, [sp, #4]
 80012b8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	9402      	str	r4, [sp, #8]
 80012bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012be:	f042 0202 	orr.w	r2, r2, #2
 80012c2:	631a      	str	r2, [r3, #48]	; 0x30
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012ca:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012ce:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012d4:	f7ff fca4 	bl	8000c20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <main+0xec>)
 80012dc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	e9cd 3703 	strd	r3, r7, [sp, #12]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012e2:	2604      	movs	r6, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f7ff fbba 	bl	8000a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <main+0xec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	e9cd 6403 	strd	r6, r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f7ff fbb3 	bl	8000a60 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 21;
 80012fa:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <main+0xf4>)
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012fc:	61ac      	str	r4, [r5, #24]
  hcan1.Init.Prescaler = 21;
 80012fe:	2315      	movs	r3, #21
 8001300:	e9c5 2300 	strd	r2, r3, [r5]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001304:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8001308:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800130c:	83ac      	strh	r4, [r5, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800130e:	4628      	mov	r0, r5
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001310:	e9c5 1304 	strd	r1, r3, [r5, #16]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001314:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001318:	f7ff f936 	bl	8000588 <HAL_CAN_Init>
  DWT_Delay_Init();
 800131c:	f7ff ff02 	bl	8001124 <DWT_Delay_Init>
  pTxHeader.DLC = 1;      // Specifies the length of the frame that will be transmitted. (Biz 1 bytlık veri gönderiyoruz)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <main+0xf8>)
  pTxHeader.ExtId = 0x0AF09876;              /*!< Specifies the extended identifier. This parameter must be
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <main+0xfc>)
  pTxHeader.DLC = 1;      // Specifies the length of the frame that will be transmitted. (Biz 1 bytlık veri gönderiyoruz)
 8001324:	611f      	str	r7, [r3, #16]
   HAL_CAN_Start(&hcan1);
 8001326:	4628      	mov	r0, r5
  pTxHeader.RTR = CAN_RTR_DATA;     /*!< Specifies the type of frame for the message that will be transmitted.
 8001328:	e9c3 6402 	strd	r6, r4, [r3, #8]
  pTxHeader.ExtId = 0x0AF09876;              /*!< Specifies the extended identifier. This parameter must be
 800132c:	605a      	str	r2, [r3, #4]
   HAL_CAN_Start(&hcan1);
 800132e:	f7ff f9a6 	bl	800067e <HAL_CAN_Start>
 sensor_time = Read_HCSR04();
 8001332:	4e10      	ldr	r6, [pc, #64]	; (8001374 <main+0x100>)
 distance[0] = sensor_time  / 58;
 8001334:	4d10      	ldr	r5, [pc, #64]	; (8001378 <main+0x104>)
 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader,(uint8_t*) distance, &pTxMailbox); // distance 32 bitlik 8bite çevirdik.
 8001336:	4c11      	ldr	r4, [pc, #68]	; (800137c <main+0x108>)
 sensor_time = Read_HCSR04();
 8001338:	f7ff ff2c 	bl	8001194 <Read_HCSR04>
 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader,(uint8_t*) distance, &pTxMailbox); // distance 32 bitlik 8bite çevirdik.
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <main+0x104>)
 sensor_time = Read_HCSR04();
 800133e:	6030      	str	r0, [r6, #0]
 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader,(uint8_t*) distance, &pTxMailbox); // distance 32 bitlik 8bite çevirdik.
 8001340:	490a      	ldr	r1, [pc, #40]	; (800136c <main+0xf8>)
 distance[0] = sensor_time  / 58;
 8001342:	233a      	movs	r3, #58	; 0x3a
 8001344:	fbb0 f0f3 	udiv	r0, r0, r3
 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader,(uint8_t*) distance, &pTxMailbox); // distance 32 bitlik 8bite çevirdik.
 8001348:	4623      	mov	r3, r4
 distance[0] = sensor_time  / 58;
 800134a:	6028      	str	r0, [r5, #0]
 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader,(uint8_t*) distance, &pTxMailbox); // distance 32 bitlik 8bite çevirdik.
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <main+0xf0>)
 800134e:	f7ff f9c4 	bl	80006da <HAL_CAN_AddTxMessage>
 HAL_Delay(20);
 8001352:	2014      	movs	r0, #20
 8001354:	f7ff f904 	bl	8000560 <HAL_Delay>
  while (1)
 8001358:	e7ee      	b.n	8001338 <main+0xc4>
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	20000078 	.word	0x20000078
 8001368:	40006400 	.word	0x40006400
 800136c:	2000005c 	.word	0x2000005c
 8001370:	0af09876 	.word	0x0af09876
 8001374:	20000054 	.word	0x20000054
 8001378:	20000074 	.word	0x20000074
 800137c:	20000058 	.word	0x20000058

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_MspInit+0x38>)
 8001384:	2100      	movs	r1, #0
 8001386:	9100      	str	r1, [sp, #0]
 8001388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800138a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
 8001390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001392:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	9101      	str	r1, [sp, #4]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ae:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013b2:	f7ff baed 	b.w	8000990 <HAL_NVIC_SetPriorityGrouping>
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013bc:	b510      	push	{r4, lr}
 80013be:	4604      	mov	r4, r0
 80013c0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	2214      	movs	r2, #20
 80013c4:	2100      	movs	r1, #0
 80013c6:	a803      	add	r0, sp, #12
 80013c8:	f000 f8bc 	bl	8001544 <memset>
  if(hcan->Instance==CAN1)
 80013cc:	6822      	ldr	r2, [r4, #0]
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_CAN_MspInit+0x78>)
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d12c      	bne.n	800142e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013d4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80013d8:	2400      	movs	r4, #0
 80013da:	9401      	str	r4, [sp, #4]
 80013dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	4816      	ldr	r0, [pc, #88]	; (8001438 <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	9402      	str	r4, [sp, #8]
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f042 0202 	orr.w	r2, r2, #2
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001410:	2103      	movs	r1, #3
 8001412:	2309      	movs	r3, #9
 8001414:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	a903      	add	r1, sp, #12
 800141a:	f7ff fb21 	bl	8000a60 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 1);
 800141e:	2014      	movs	r0, #20
 8001420:	2201      	movs	r2, #1
 8001422:	4621      	mov	r1, r4
 8001424:	f7ff fac6 	bl	80009b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001428:	2014      	movs	r0, #20
 800142a:	f7ff faf5 	bl	8000a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800142e:	b008      	add	sp, #32
 8001430:	bd10      	pop	{r4, pc}
 8001432:	bf00      	nop
 8001434:	40006400 	.word	0x40006400
 8001438:	40020400 	.word	0x40020400

0800143c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143c:	4770      	bx	lr

0800143e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler>

08001440 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler>

08001442 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler>

08001444 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler>

08001446 <SVC_Handler>:
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f7ff b876 	b.w	800053c <HAL_IncTick>

08001450 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001450:	4801      	ldr	r0, [pc, #4]	; (8001458 <CAN1_RX0_IRQHandler+0x8>)
 8001452:	f7ff b99f 	b.w	8000794 <HAL_CAN_IRQHandler>
 8001456:	bf00      	nop
 8001458:	20000078 	.word	0x20000078

0800145c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	490f      	ldr	r1, [pc, #60]	; (800149c <SystemInit+0x40>)
 800145e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001462:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <SystemInit+0x44>)
 800146c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001476:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800147e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001482:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <SystemInit+0x48>)
 8001486:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800148e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001490:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001496:	608b      	str	r3, [r1, #8]
#endif
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	24003010 	.word	0x24003010

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ae:	e003      	b.n	80014b8 <LoopCopyDataInit>

080014b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014b6:	3104      	adds	r1, #4

080014b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014c0:	d3f6      	bcc.n	80014b0 <CopyDataInit>
  ldr  r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014c4:	e002      	b.n	80014cc <LoopFillZerobss>

080014c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014c8:	f842 3b04 	str.w	r3, [r2], #4

080014cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014d0:	d3f9      	bcc.n	80014c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014d2:	f7ff ffc3 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f000 f811 	bl	80014fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff fecb 	bl	8001274 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014e4:	0800158c 	.word	0x0800158c
  ldr  r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014ec:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80014f0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80014f4:	200000a0 	.word	0x200000a0

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>
	...

080014fc <__libc_init_array>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	4d0d      	ldr	r5, [pc, #52]	; (8001534 <__libc_init_array+0x38>)
 8001500:	4c0d      	ldr	r4, [pc, #52]	; (8001538 <__libc_init_array+0x3c>)
 8001502:	1b64      	subs	r4, r4, r5
 8001504:	10a4      	asrs	r4, r4, #2
 8001506:	2600      	movs	r6, #0
 8001508:	42a6      	cmp	r6, r4
 800150a:	d109      	bne.n	8001520 <__libc_init_array+0x24>
 800150c:	4d0b      	ldr	r5, [pc, #44]	; (800153c <__libc_init_array+0x40>)
 800150e:	4c0c      	ldr	r4, [pc, #48]	; (8001540 <__libc_init_array+0x44>)
 8001510:	f000 f820 	bl	8001554 <_init>
 8001514:	1b64      	subs	r4, r4, r5
 8001516:	10a4      	asrs	r4, r4, #2
 8001518:	2600      	movs	r6, #0
 800151a:	42a6      	cmp	r6, r4
 800151c:	d105      	bne.n	800152a <__libc_init_array+0x2e>
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	f855 3b04 	ldr.w	r3, [r5], #4
 8001524:	4798      	blx	r3
 8001526:	3601      	adds	r6, #1
 8001528:	e7ee      	b.n	8001508 <__libc_init_array+0xc>
 800152a:	f855 3b04 	ldr.w	r3, [r5], #4
 800152e:	4798      	blx	r3
 8001530:	3601      	adds	r6, #1
 8001532:	e7f2      	b.n	800151a <__libc_init_array+0x1e>
 8001534:	08001584 	.word	0x08001584
 8001538:	08001584 	.word	0x08001584
 800153c:	08001584 	.word	0x08001584
 8001540:	08001588 	.word	0x08001588

08001544 <memset>:
 8001544:	4402      	add	r2, r0
 8001546:	4603      	mov	r3, r0
 8001548:	4293      	cmp	r3, r2
 800154a:	d100      	bne.n	800154e <memset+0xa>
 800154c:	4770      	bx	lr
 800154e:	f803 1b01 	strb.w	r1, [r3], #1
 8001552:	e7f9      	b.n	8001548 <memset+0x4>

08001554 <_init>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr

08001560 <_fini>:
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001562:	bf00      	nop
 8001564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001566:	bc08      	pop	{r3}
 8001568:	469e      	mov	lr, r3
 800156a:	4770      	bx	lr
