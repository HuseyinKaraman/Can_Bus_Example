
007_HAL_CAN_BUS_EXT_ID_WITHOUT_ID_MASK_FILTER_BOARD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001590  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001718  08001718  00011718  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000b8  200000b8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ba0f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001c9a  00000000  00000000  0002ba4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00001d4b  00000000  00000000  0002d6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002009c  00000000  00000000  0002fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073f7  00000000  00000000  0004fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bceb9  00000000  00000000  00057253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011410c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a88  00000000  00000000  00114160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001700 	.word	0x08001700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001700 	.word	0x08001700

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_InitTick+0x3c>)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
{
 80004c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c8:	7818      	ldrb	r0, [r3, #0]
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 fbb2 	bl	8000c40 <HAL_SYSTICK_Config>
 80004dc:	4604      	mov	r4, r0
 80004de:	b958      	cbnz	r0, 80004f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e0:	2d0f      	cmp	r5, #15
 80004e2:	d809      	bhi.n	80004f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e4:	4602      	mov	r2, r0
 80004e6:	4629      	mov	r1, r5
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f000 fb6a 	bl	8000bc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_InitTick+0x44>)
 80004f2:	4620      	mov	r0, r4
 80004f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7fc      	b.n	80004f6 <HAL_InitTick+0x36>
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000000 	.word	0x20000000
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 fb3b 	bl	8000ba0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f000 ffca 	bl	80014c8 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_IncTick+0x14>)
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000002c 	.word	0x2000002c
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000002c 	.word	0x2000002c

08000560 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000560:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000562:	4604      	mov	r4, r0
 8000564:	2800      	cmp	r0, #0
 8000566:	d06e      	beq.n	8000646 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000568:	f890 3020 	ldrb.w	r3, [r0, #32]
 800056c:	b90b      	cbnz	r3, 8000572 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800056e:	f000 ffc9 	bl	8001504 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000572:	6822      	ldr	r2, [r4, #0]
 8000574:	6813      	ldr	r3, [r2, #0]
 8000576:	f023 0302 	bic.w	r3, r3, #2
 800057a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800057c:	f7ff ffea 	bl	8000554 <HAL_GetTick>
 8000580:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	0791      	lsls	r1, r2, #30
 8000588:	d451      	bmi.n	800062e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f042 0201 	orr.w	r2, r2, #1
 8000590:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000592:	f7ff ffdf 	bl	8000554 <HAL_GetTick>
 8000596:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	07d2      	lsls	r2, r2, #31
 800059e:	d554      	bpl.n	800064a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005a0:	7e22      	ldrb	r2, [r4, #24]
 80005a2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	bf0c      	ite	eq
 80005a8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005ac:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80005b2:	7e62      	ldrb	r2, [r4, #25]
 80005b4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	bf0c      	ite	eq
 80005ba:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005be:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80005c4:	7ea2      	ldrb	r2, [r4, #26]
 80005c6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	bf0c      	ite	eq
 80005cc:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005d0:	f022 0220 	bicne.w	r2, r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80005d6:	7ee2      	ldrb	r2, [r4, #27]
 80005d8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	bf0c      	ite	eq
 80005de:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005e2:	f042 0210 	orrne.w	r2, r2, #16
 80005e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80005e8:	7f22      	ldrb	r2, [r4, #28]
 80005ea:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	bf0c      	ite	eq
 80005f0:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80005f4:	f022 0208 	bicne.w	r2, r2, #8
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80005fa:	7f62      	ldrb	r2, [r4, #29]
 80005fc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	bf0c      	ite	eq
 8000602:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000606:	f022 0204 	bicne.w	r2, r2, #4
 800060a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800060c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000610:	430a      	orrs	r2, r1
 8000612:	6921      	ldr	r1, [r4, #16]
 8000614:	430a      	orrs	r2, r1
 8000616:	6961      	ldr	r1, [r4, #20]
 8000618:	430a      	orrs	r2, r1
 800061a:	6861      	ldr	r1, [r4, #4]
 800061c:	3901      	subs	r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000622:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000624:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000626:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000628:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800062c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800062e:	f7ff ff91 	bl	8000554 <HAL_GetTick>
 8000632:	1b40      	subs	r0, r0, r5
 8000634:	280a      	cmp	r0, #10
 8000636:	d9a4      	bls.n	8000582 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800063a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000640:	2305      	movs	r3, #5
 8000642:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000646:	2001      	movs	r0, #1
 8000648:	e7f0      	b.n	800062c <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800064a:	f7ff ff83 	bl	8000554 <HAL_GetTick>
 800064e:	1b40      	subs	r0, r0, r5
 8000650:	280a      	cmp	r0, #10
 8000652:	d9a1      	bls.n	8000598 <HAL_CAN_Init+0x38>
 8000654:	e7f0      	b.n	8000638 <HAL_CAN_Init+0xd8>
	...

08000658 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000658:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800065a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d003      	beq.n	800066a <HAL_CAN_ConfigFilter+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000662:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000666:	2b02      	cmp	r3, #2
 8000668:	d175      	bne.n	8000756 <HAL_CAN_ConfigFilter+0xfe>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <HAL_CAN_ConfigFilter+0x10c>)
 800066c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000670:	f042 0201 	orr.w	r2, r2, #1
 8000674:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000678:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800067c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000688:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800068a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800068e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 8000692:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000694:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 8000698:	2001      	movs	r0, #1
 800069a:	4090      	lsls	r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800069c:	ea25 0500 	bic.w	r5, r5, r0
 80006a0:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006a4:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006a6:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d135      	bne.n	8000718 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80006ac:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80006b0:	4025      	ands	r5, r4
 80006b2:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006b6:	68cb      	ldr	r3, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80006b8:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006be:	00d3      	lsls	r3, r2, #3
 80006c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006c4:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80006c8:	880a      	ldrh	r2, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80006ca:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006ce:	688d      	ldr	r5, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006d0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80006d4:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006d8:	698a      	ldr	r2, [r1, #24]
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_CAN_ConfigFilter+0x10c>)
 80006dc:	bb8a      	cbnz	r2, 8000742 <HAL_CAN_ConfigFilter+0xea>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006e2:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80006e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006e8:	690a      	ldr	r2, [r1, #16]
 80006ea:	bb72      	cbnz	r2, 800074a <HAL_CAN_ConfigFilter+0xf2>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80006ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006f0:	4014      	ands	r4, r2
 80006f2:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 80006f6:	6a0b      	ldr	r3, [r1, #32]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_CAN_ConfigFilter+0x10c>)
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80006fc:	bf02      	ittt	eq
 80006fe:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000702:	4310      	orreq	r0, r2
 8000704:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000708:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800070c:	f022 0201 	bic.w	r2, r2, #1
 8000710:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000714:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000716:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000718:	2d01      	cmp	r5, #1
 800071a:	d1dd      	bne.n	80006d8 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800071c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000720:	4305      	orrs	r5, r0
 8000722:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000726:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000728:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800072a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800072e:	00d3      	lsls	r3, r2, #3
 8000730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000734:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000738:	898a      	ldrh	r2, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800073a:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800073e:	688d      	ldr	r5, [r1, #8]
 8000740:	e7c6      	b.n	80006d0 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000746:	4302      	orrs	r2, r0
 8000748:	e7cc      	b.n	80006e4 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800074a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800074e:	4302      	orrs	r2, r0
 8000750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000754:	e7cf      	b.n	80006f6 <HAL_CAN_ConfigFilter+0x9e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000756:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800075e:	2001      	movs	r0, #1
 8000760:	e7d9      	b.n	8000716 <HAL_CAN_ConfigFilter+0xbe>
 8000762:	bf00      	nop
 8000764:	40006400 	.word	0x40006400

08000768 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000768:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 800076a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800076e:	2b01      	cmp	r3, #1
{
 8000770:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000772:	b2dd      	uxtb	r5, r3
 8000774:	d120      	bne.n	80007b8 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000776:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000778:	2302      	movs	r3, #2
 800077a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800077e:	6813      	ldr	r3, [r2, #0]
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000786:	f7ff fee5 	bl	8000554 <HAL_GetTick>
 800078a:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f013 0301 	ands.w	r3, r3, #1
 8000794:	d102      	bne.n	800079c <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000796:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000798:	461d      	mov	r5, r3
 800079a:	e00b      	b.n	80007b4 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800079c:	f7ff feda 	bl	8000554 <HAL_GetTick>
 80007a0:	1b80      	subs	r0, r0, r6
 80007a2:	280a      	cmp	r0, #10
 80007a4:	d9f2      	bls.n	800078c <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ac:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80007ae:	2305      	movs	r3, #5
 80007b0:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80007b4:	4628      	mov	r0, r5
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80007b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007be:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80007c0:	2501      	movs	r5, #1
 80007c2:	e7f7      	b.n	80007b4 <HAL_CAN_Start+0x4c>

080007c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80007c6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80007ca:	2c01      	cmp	r4, #1
 80007cc:	d003      	beq.n	80007d6 <HAL_CAN_AddTxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80007ce:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80007d2:	2c02      	cmp	r4, #2
 80007d4:	d142      	bne.n	800085c <HAL_CAN_AddTxMessage+0x98>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 80007d6:	6804      	ldr	r4, [r0, #0]
 80007d8:	68a5      	ldr	r5, [r4, #8]
 80007da:	016f      	lsls	r7, r5, #5
 80007dc:	d405      	bmi.n	80007ea <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 80007de:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 80007e0:	012e      	lsls	r6, r5, #4
 80007e2:	d402      	bmi.n	80007ea <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 80007e4:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	d532      	bpl.n	8000850 <HAL_CAN_AddTxMessage+0x8c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007ea:	68a0      	ldr	r0, [r4, #8]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 80007ec:	2501      	movs	r5, #1
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007ee:	f3c0 6001 	ubfx	r0, r0, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 80007f2:	4085      	lsls	r5, r0
 80007f4:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80007f6:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
 80007fa:	f100 0318 	add.w	r3, r0, #24
 80007fe:	bb15      	cbnz	r5, 8000846 <HAL_CAN_AddTxMessage+0x82>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000800:	680d      	ldr	r5, [r1, #0]
 8000802:	ea47 5545 	orr.w	r5, r7, r5, lsl #21
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800080a:	0103      	lsls	r3, r0, #4
 800080c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8000810:	690d      	ldr	r5, [r1, #16]
 8000812:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000816:	7d09      	ldrb	r1, [r1, #20]
 8000818:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800081a:	bf02      	ittt	eq
 800081c:	f8d0 1184 	ldreq.w	r1, [r0, #388]	; 0x184
 8000820:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000824:	f8c0 1184 	streq.w	r1, [r0, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000828:	4423      	add	r3, r4
 800082a:	6851      	ldr	r1, [r2, #4]
 800082c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000836:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8000842:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000846:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8000848:	433d      	orrs	r5, r7
 800084a:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
 800084e:	e7da      	b.n	8000806 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000850:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000856:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000858:	2001      	movs	r0, #1
 800085a:	e7f3      	b.n	8000844 <HAL_CAN_AddTxMessage+0x80>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800085c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800085e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000862:	e7f8      	b.n	8000856 <HAL_CAN_AddTxMessage+0x92>

08000864 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000866:	f890 4020 	ldrb.w	r4, [r0, #32]
 800086a:	2c01      	cmp	r4, #1
 800086c:	d003      	beq.n	8000876 <HAL_CAN_GetRxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800086e:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000872:	2c02      	cmp	r4, #2
 8000874:	d171      	bne.n	800095a <HAL_CAN_GetRxMessage+0xf6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000876:	6806      	ldr	r6, [r0, #0]
 8000878:	b941      	cbnz	r1, 800088c <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 800087a:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 800087c:	07a4      	lsls	r4, r4, #30
 800087e:	d109      	bne.n	8000894 <HAL_CAN_GetRxMessage+0x30>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000886:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000888:	2001      	movs	r0, #1
  }
}
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 800088c:	2901      	cmp	r1, #1
 800088e:	d101      	bne.n	8000894 <HAL_CAN_GetRxMessage+0x30>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000890:	6934      	ldr	r4, [r6, #16]
 8000892:	e7f3      	b.n	800087c <HAL_CAN_GetRxMessage+0x18>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000894:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000898:	010c      	lsls	r4, r1, #4
 800089a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800089e:	f007 0704 	and.w	r7, r7, #4
 80008a2:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008a4:	2f00      	cmp	r7, #0
 80008a6:	d14b      	bne.n	8000940 <HAL_CAN_GetRxMessage+0xdc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008a8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008ac:	0d7f      	lsrs	r7, r7, #21
 80008ae:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80008b0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008b4:	f3c7 0740 	ubfx	r7, r7, #1, #1
 80008b8:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008ba:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80008be:	f007 070f 	and.w	r7, r7, #15
 80008c2:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008c4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008c8:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80008cc:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008d2:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008d4:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008d6:	6155      	str	r5, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80008d8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80008dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80008de:	6802      	ldr	r2, [r0, #0]
 80008e0:	4422      	add	r2, r4
 80008e2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008e6:	0a12      	lsrs	r2, r2, #8
 80008e8:	705a      	strb	r2, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80008ea:	6802      	ldr	r2, [r0, #0]
 80008ec:	4422      	add	r2, r4
 80008ee:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008f2:	0c12      	lsrs	r2, r2, #16
 80008f4:	709a      	strb	r2, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80008f6:	6802      	ldr	r2, [r0, #0]
 80008f8:	4422      	add	r2, r4
 80008fa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008fe:	0e12      	lsrs	r2, r2, #24
 8000900:	70da      	strb	r2, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8000902:	6802      	ldr	r2, [r0, #0]
 8000904:	4422      	add	r2, r4
 8000906:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800090a:	711a      	strb	r2, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 800090c:	6802      	ldr	r2, [r0, #0]
 800090e:	4422      	add	r2, r4
 8000910:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000914:	0a12      	lsrs	r2, r2, #8
 8000916:	715a      	strb	r2, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8000918:	6802      	ldr	r2, [r0, #0]
 800091a:	4422      	add	r2, r4
 800091c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000920:	0c12      	lsrs	r2, r2, #16
 8000922:	719a      	strb	r2, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000924:	6802      	ldr	r2, [r0, #0]
 8000926:	4414      	add	r4, r2
 8000928:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800092c:	0e12      	lsrs	r2, r2, #24
 800092e:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000930:	b959      	cbnz	r1, 800094a <HAL_CAN_GetRxMessage+0xe6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000932:	6802      	ldr	r2, [r0, #0]
 8000934:	68d3      	ldr	r3, [r2, #12]
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800093c:	2000      	movs	r0, #0
 800093e:	e7a4      	b.n	800088a <HAL_CAN_GetRxMessage+0x26>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000940:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000944:	08ff      	lsrs	r7, r7, #3
 8000946:	6057      	str	r7, [r2, #4]
 8000948:	e7b2      	b.n	80008b0 <HAL_CAN_GetRxMessage+0x4c>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 800094a:	2901      	cmp	r1, #1
 800094c:	d1f6      	bne.n	800093c <HAL_CAN_GetRxMessage+0xd8>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800094e:	6802      	ldr	r2, [r0, #0]
 8000950:	6913      	ldr	r3, [r2, #16]
 8000952:	f043 0320 	orr.w	r3, r3, #32
 8000956:	6113      	str	r3, [r2, #16]
 8000958:	e7f0      	b.n	800093c <HAL_CAN_GetRxMessage+0xd8>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800095a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800095c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000960:	e791      	b.n	8000886 <HAL_CAN_GetRxMessage+0x22>

08000962 <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000962:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d003      	beq.n	8000972 <HAL_CAN_ActivateNotification+0x10>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800096a:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800096e:	2b02      	cmp	r3, #2
 8000970:	d105      	bne.n	800097e <HAL_CAN_ActivateNotification+0x1c>
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000972:	6802      	ldr	r2, [r0, #0]
 8000974:	6953      	ldr	r3, [r2, #20]
 8000976:	4319      	orrs	r1, r3
 8000978:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 800097a:	2000      	movs	r0, #0
 800097c:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800097e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000984:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000986:	2001      	movs	r0, #1
  }
}
 8000988:	4770      	bx	lr

0800098a <HAL_CAN_TxMailbox0CompleteCallback>:
 800098a:	4770      	bx	lr

0800098c <HAL_CAN_TxMailbox1CompleteCallback>:
 800098c:	4770      	bx	lr

0800098e <HAL_CAN_TxMailbox2CompleteCallback>:
 800098e:	4770      	bx	lr

08000990 <HAL_CAN_TxMailbox0AbortCallback>:
 8000990:	4770      	bx	lr

08000992 <HAL_CAN_TxMailbox1AbortCallback>:
 8000992:	4770      	bx	lr

08000994 <HAL_CAN_TxMailbox2AbortCallback>:
 8000994:	4770      	bx	lr

08000996 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000996:	4770      	bx	lr

08000998 <HAL_CAN_RxFifo0FullCallback>:
 8000998:	4770      	bx	lr

0800099a <HAL_CAN_RxFifo1MsgPendingCallback>:
 800099a:	4770      	bx	lr

0800099c <HAL_CAN_RxFifo1FullCallback>:
 800099c:	4770      	bx	lr

0800099e <HAL_CAN_SleepCallback>:
 800099e:	4770      	bx	lr

080009a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80009a0:	4770      	bx	lr

080009a2 <HAL_CAN_ErrorCallback>:
 80009a2:	4770      	bx	lr

080009a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80009a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80009a8:	6803      	ldr	r3, [r0, #0]
 80009aa:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80009ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80009b0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009b2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009b6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009ba:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 80009be:	f016 0401 	ands.w	r4, r6, #1
{
 80009c2:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 80009c4:	d022      	beq.n	8000a0c <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 80009c6:	f017 0401 	ands.w	r4, r7, #1
 80009ca:	d007      	beq.n	80009dc <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009cc:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 80009ce:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009d0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 80009d2:	f140 80a5 	bpl.w	8000b20 <HAL_CAN_IRQHandler+0x17c>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80009d6:	f7ff ffd8 	bl	800098a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80009da:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 80009dc:	05fb      	lsls	r3, r7, #23
 80009de:	d509      	bpl.n	80009f4 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 80009e6:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009e8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 80009ea:	f140 80a7 	bpl.w	8000b3c <HAL_CAN_IRQHandler+0x198>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009ee:	4628      	mov	r0, r5
 80009f0:	f7ff ffcc 	bl	800098c <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 80009f4:	03fb      	lsls	r3, r7, #15
 80009f6:	d509      	bpl.n	8000a0c <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 80009fe:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a00:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8000a02:	f140 80a9 	bpl.w	8000b58 <HAL_CAN_IRQHandler+0x1b4>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a06:	4628      	mov	r0, r5
 8000a08:	f7ff ffc1 	bl	800098e <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 8000a0c:	0733      	lsls	r3, r6, #28
 8000a0e:	d507      	bpl.n	8000a20 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8000a10:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a14:	bf1f      	itttt	ne
 8000a16:	682b      	ldrne	r3, [r5, #0]
 8000a18:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a1a:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a1e:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 8000a20:	0777      	lsls	r7, r6, #29
 8000a22:	d508      	bpl.n	8000a36 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8000a24:	f01b 0f08 	tst.w	fp, #8
 8000a28:	d005      	beq.n	8000a36 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a30:	4628      	mov	r0, r5
 8000a32:	f7ff ffb1 	bl	8000998 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 8000a36:	07b0      	lsls	r0, r6, #30
 8000a38:	d506      	bpl.n	8000a48 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	0799      	lsls	r1, r3, #30
 8000a40:	d002      	beq.n	8000a48 <HAL_CAN_IRQHandler+0xa4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a42:	4628      	mov	r0, r5
 8000a44:	f7ff ffa7 	bl	8000996 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 8000a48:	0672      	lsls	r2, r6, #25
 8000a4a:	d507      	bpl.n	8000a5c <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8000a4c:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a50:	bf1f      	itttt	ne
 8000a52:	682b      	ldrne	r3, [r5, #0]
 8000a54:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a56:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a5a:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8000a5c:	06b3      	lsls	r3, r6, #26
 8000a5e:	d508      	bpl.n	8000a72 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8000a60:	f01a 0f08 	tst.w	sl, #8
 8000a64:	d005      	beq.n	8000a72 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	2208      	movs	r2, #8
 8000a6a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f7ff ff95 	bl	800099c <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 8000a72:	06f7      	lsls	r7, r6, #27
 8000a74:	d506      	bpl.n	8000a84 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	d002      	beq.n	8000a84 <HAL_CAN_IRQHandler+0xe0>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f7ff ff8b 	bl	800099a <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 8000a84:	03b1      	lsls	r1, r6, #14
 8000a86:	d508      	bpl.n	8000a9a <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8000a88:	f019 0f10 	tst.w	r9, #16
 8000a8c:	d005      	beq.n	8000a9a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	2210      	movs	r2, #16
 8000a92:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a94:	4628      	mov	r0, r5
 8000a96:	f7ff ff82 	bl	800099e <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8000a9a:	03f2      	lsls	r2, r6, #15
 8000a9c:	d508      	bpl.n	8000ab0 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 8000a9e:	f019 0f08 	tst.w	r9, #8
 8000aa2:	d005      	beq.n	8000ab0 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000aaa:	4628      	mov	r0, r5
 8000aac:	f7ff ff78 	bl	80009a0 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8000ab0:	0433      	lsls	r3, r6, #16
 8000ab2:	d52c      	bpl.n	8000b0e <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8000ab4:	f019 0f04 	tst.w	r9, #4
 8000ab8:	682a      	ldr	r2, [r5, #0]
 8000aba:	d026      	beq.n	8000b0a <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8000abc:	05f7      	lsls	r7, r6, #23
 8000abe:	d504      	bpl.n	8000aca <HAL_CAN_IRQHandler+0x126>
 8000ac0:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != RESET))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ac4:	bf18      	it	ne
 8000ac6:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8000aca:	05b0      	lsls	r0, r6, #22
 8000acc:	d504      	bpl.n	8000ad8 <HAL_CAN_IRQHandler+0x134>
 8000ace:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != RESET))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ad2:	bf18      	it	ne
 8000ad4:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8000ad8:	0571      	lsls	r1, r6, #21
 8000ada:	d504      	bpl.n	8000ae6 <HAL_CAN_IRQHandler+0x142>
 8000adc:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != RESET))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ae0:	bf18      	it	ne
 8000ae2:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8000ae6:	0533      	lsls	r3, r6, #20
 8000ae8:	d50f      	bpl.n	8000b0a <HAL_CAN_IRQHandler+0x166>
 8000aea:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000aee:	d00c      	beq.n	8000b0a <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != RESET))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000af0:	2b40      	cmp	r3, #64	; 0x40
 8000af2:	d04f      	beq.n	8000b94 <HAL_CAN_IRQHandler+0x1f0>
 8000af4:	d83e      	bhi.n	8000b74 <HAL_CAN_IRQHandler+0x1d0>
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d046      	beq.n	8000b88 <HAL_CAN_IRQHandler+0x1e4>
 8000afa:	2b30      	cmp	r3, #48	; 0x30
 8000afc:	d047      	beq.n	8000b8e <HAL_CAN_IRQHandler+0x1ea>
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d03f      	beq.n	8000b82 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b02:	6993      	ldr	r3, [r2, #24]
 8000b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b08:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b0e:	b12c      	cbz	r4, 8000b1c <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b12:	431c      	orrs	r4, r3
 8000b14:	626c      	str	r4, [r5, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b16:	4628      	mov	r0, r5
 8000b18:	f7ff ff43 	bl	80009a2 <HAL_CAN_ErrorCallback>
  }
}
 8000b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8000b20:	077a      	lsls	r2, r7, #29
 8000b22:	d405      	bmi.n	8000b30 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8000b24:	f017 0408 	ands.w	r4, r7, #8
 8000b28:	d105      	bne.n	8000b36 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b2a:	f7ff ff31 	bl	8000990 <HAL_CAN_TxMailbox0AbortCallback>
 8000b2e:	e755      	b.n	80009dc <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b30:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000b34:	e752      	b.n	80009dc <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b36:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b3a:	e74f      	b.n	80009dc <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8000b3c:	0579      	lsls	r1, r7, #21
 8000b3e:	d502      	bpl.n	8000b46 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b40:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000b44:	e756      	b.n	80009f4 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8000b46:	053a      	lsls	r2, r7, #20
 8000b48:	d502      	bpl.n	8000b50 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b4a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b4e:	e751      	b.n	80009f4 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b50:	4628      	mov	r0, r5
 8000b52:	f7ff ff1e 	bl	8000992 <HAL_CAN_TxMailbox1AbortCallback>
 8000b56:	e74d      	b.n	80009f4 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 8000b58:	0379      	lsls	r1, r7, #13
 8000b5a:	d502      	bpl.n	8000b62 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b5c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b60:	e754      	b.n	8000a0c <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 8000b62:	033a      	lsls	r2, r7, #12
 8000b64:	d502      	bpl.n	8000b6c <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b66:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000b6a:	e74f      	b.n	8000a0c <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f7ff ff11 	bl	8000994 <HAL_CAN_TxMailbox2AbortCallback>
 8000b72:	e74b      	b.n	8000a0c <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000b74:	2b50      	cmp	r3, #80	; 0x50
 8000b76:	d010      	beq.n	8000b9a <HAL_CAN_IRQHandler+0x1f6>
 8000b78:	2b60      	cmp	r3, #96	; 0x60
 8000b7a:	d1c2      	bne.n	8000b02 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b7c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000b80:	e7bf      	b.n	8000b02 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b82:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000b86:	e7bc      	b.n	8000b02 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b88:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000b8c:	e7b9      	b.n	8000b02 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b8e:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000b92:	e7b6      	b.n	8000b02 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b94:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000b98:	e7b3      	b.n	8000b02 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b9a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000b9e:	e7b0      	b.n	8000b02 <HAL_CAN_IRQHandler+0x15e>

08000ba0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ba2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ba8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bbc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b530      	push	{r4, r5, lr}
 8000bc8:	68dc      	ldr	r4, [r3, #12]
 8000bca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bce:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	2d04      	cmp	r5, #4
 8000bd6:	bf28      	it	cs
 8000bd8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be0:	bf8c      	ite	hi
 8000be2:	3c03      	subhi	r4, #3
 8000be4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be6:	fa03 f505 	lsl.w	r5, r3, r5
 8000bea:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bee:	40a3      	lsls	r3, r4
 8000bf0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000bf6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	bfac      	ite	ge
 8000bfe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	4a08      	ldrlt	r2, [pc, #32]	; (8000c24 <HAL_NVIC_SetPriority+0x60>)
 8000c04:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000c08:	bfb8      	it	lt
 8000c0a:	f000 000f 	andlt.w	r0, r0, #15
 8000c0e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	bfaa      	itet	ge
 8000c12:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c1c:	bd30      	pop	{r4, r5, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	e000ed14 	.word	0xe000ed14

08000c28 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c28:	0942      	lsrs	r2, r0, #5
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f000 001f 	and.w	r0, r0, #31
 8000c30:	fa03 f000 	lsl.w	r0, r3, r0
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <HAL_NVIC_EnableIRQ+0x14>)
 8000c36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	3801      	subs	r0, #1
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c46:	d20a      	bcs.n	8000c5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	21f0      	movs	r1, #240	; 0xf0
 8000c50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c70:	4a6e      	ldr	r2, [pc, #440]	; (8000e2c <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e34 <HAL_GPIO_Init+0x1c8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c76:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000e38 <HAL_GPIO_Init+0x1cc>
{
 8000c7a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8000c80:	2701      	movs	r7, #1
 8000c82:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c84:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000c88:	ea37 0404 	bics.w	r4, r7, r4
 8000c8c:	f040 80b9 	bne.w	8000e02 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	684c      	ldr	r4, [r1, #4]
 8000c92:	f024 0a10 	bic.w	sl, r4, #16
 8000c96:	f1ba 0f02 	cmp.w	sl, #2
 8000c9a:	d116      	bne.n	8000cca <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000c9c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000ca0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ca4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cb0:	f04f 0c0f 	mov.w	ip, #15
 8000cb4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000cb8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cbc:	690e      	ldr	r6, [r1, #16]
 8000cbe:	fa06 f60b 	lsl.w	r6, r6, fp
 8000cc2:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000cc6:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000cca:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cce:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cd2:	f04f 0c03 	mov.w	ip, #3
 8000cd6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000cda:	ea6f 060c 	mvn.w	r6, ip
 8000cde:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce2:	f004 0c03 	and.w	ip, r4, #3
 8000ce6:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cea:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cee:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf2:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 8000cf8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfc:	d815      	bhi.n	8000d2a <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000cfe:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d02:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	68ce      	ldr	r6, [r1, #12]
 8000d08:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000d0c:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000d10:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d14:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d18:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d1c:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000d20:	fa0c fc03 	lsl.w	ip, ip, r3
 8000d24:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000d28:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d2a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2c:	9e01      	ldr	r6, [sp, #4]
 8000d2e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	688e      	ldr	r6, [r1, #8]
 8000d32:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d36:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000d38:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3a:	00e6      	lsls	r6, r4, #3
 8000d3c:	d561      	bpl.n	8000e02 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	f04f 0b00 	mov.w	fp, #0
 8000d42:	f8cd b00c 	str.w	fp, [sp, #12]
 8000d46:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4a:	4e39      	ldr	r6, [pc, #228]	; (8000e30 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000d50:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000d54:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000d58:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000d5c:	9703      	str	r7, [sp, #12]
 8000d5e:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d60:	f023 0703 	bic.w	r7, r3, #3
 8000d64:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d68:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d70:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d74:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d78:	f04f 0c0f 	mov.w	ip, #15
 8000d7c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d80:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d82:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	d043      	beq.n	8000e10 <HAL_GPIO_Init+0x1a4>
 8000d88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d8c:	42b0      	cmp	r0, r6
 8000d8e:	d041      	beq.n	8000e14 <HAL_GPIO_Init+0x1a8>
 8000d90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d94:	42b0      	cmp	r0, r6
 8000d96:	d03f      	beq.n	8000e18 <HAL_GPIO_Init+0x1ac>
 8000d98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d9c:	42b0      	cmp	r0, r6
 8000d9e:	d03d      	beq.n	8000e1c <HAL_GPIO_Init+0x1b0>
 8000da0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000da4:	42b0      	cmp	r0, r6
 8000da6:	d03b      	beq.n	8000e20 <HAL_GPIO_Init+0x1b4>
 8000da8:	4548      	cmp	r0, r9
 8000daa:	d03b      	beq.n	8000e24 <HAL_GPIO_Init+0x1b8>
 8000dac:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000db0:	42b0      	cmp	r0, r6
 8000db2:	d039      	beq.n	8000e28 <HAL_GPIO_Init+0x1bc>
 8000db4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000db8:	42b0      	cmp	r0, r6
 8000dba:	bf0c      	ite	eq
 8000dbc:	2607      	moveq	r6, #7
 8000dbe:	2608      	movne	r6, #8
 8000dc0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dc4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc8:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000dca:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dce:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	bf0c      	ite	eq
 8000dd4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000dd6:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000dd8:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000dda:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000de0:	bf0c      	ite	eq
 8000de2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000de4:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000de6:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de8:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dea:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000dee:	bf0c      	ite	eq
 8000df0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000df2:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000df4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000df6:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	bf54      	ite	pl
 8000dfc:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000dfe:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000e00:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	3301      	adds	r3, #1
 8000e04:	2b10      	cmp	r3, #16
 8000e06:	f47f af3a 	bne.w	8000c7e <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000e0a:	b005      	add	sp, #20
 8000e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e10:	465e      	mov	r6, fp
 8000e12:	e7d5      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e14:	2601      	movs	r6, #1
 8000e16:	e7d3      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e18:	2602      	movs	r6, #2
 8000e1a:	e7d1      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e1c:	2603      	movs	r6, #3
 8000e1e:	e7cf      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e20:	2604      	movs	r6, #4
 8000e22:	e7cd      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e24:	2605      	movs	r6, #5
 8000e26:	e7cb      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e28:	2606      	movs	r6, #6
 8000e2a:	e7c9      	b.n	8000dc0 <HAL_GPIO_Init+0x154>
 8000e2c:	40013c00 	.word	0x40013c00
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021400 	.word	0x40021400

08000e3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e3c:	6903      	ldr	r3, [r0, #16]
 8000e3e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e40:	bf14      	ite	ne
 8000e42:	2001      	movne	r0, #1
 8000e44:	2000      	moveq	r0, #0
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e48:	b10a      	cbz	r2, 8000e4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4a:	6181      	str	r1, [r0, #24]
  }
}
 8000e4c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4e:	0409      	lsls	r1, r1, #16
 8000e50:	e7fb      	b.n	8000e4a <HAL_GPIO_WritePin+0x2>

08000e52 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e52:	4770      	bx	lr

08000e54 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000e56:	6951      	ldr	r1, [r2, #20]
 8000e58:	4201      	tst	r1, r0
{
 8000e5a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e5c:	d002      	beq.n	8000e64 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e60:	f7ff fff7 	bl	8000e52 <HAL_GPIO_EXTI_Callback>
}
 8000e64:	bd08      	pop	{r3, pc}
 8000e66:	bf00      	nop
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e70:	4604      	mov	r4, r0
 8000e72:	b918      	cbnz	r0, 8000e7c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000e76:	b002      	add	sp, #8
 8000e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7c:	6803      	ldr	r3, [r0, #0]
 8000e7e:	07dd      	lsls	r5, r3, #31
 8000e80:	d410      	bmi.n	8000ea4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	0798      	lsls	r0, r3, #30
 8000e86:	d45b      	bmi.n	8000f40 <HAL_RCC_OscConfig+0xd4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	071a      	lsls	r2, r3, #28
 8000e8c:	f100 809d 	bmi.w	8000fca <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	075b      	lsls	r3, r3, #29
 8000e94:	f100 80bb 	bmi.w	800100e <HAL_RCC_OscConfig+0x1a2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e98:	69a2      	ldr	r2, [r4, #24]
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	f040 811c 	bne.w	80010d8 <HAL_RCC_OscConfig+0x26c>
  return HAL_OK;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e7e8      	b.n	8000e76 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ea4:	4ba5      	ldr	r3, [pc, #660]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	f002 020c 	and.w	r2, r2, #12
 8000eac:	2a04      	cmp	r2, #4
 8000eae:	d007      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb6:	2a08      	cmp	r2, #8
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	0251      	lsls	r1, r2, #9
 8000ebe:	d507      	bpl.n	8000ed0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	4b9e      	ldr	r3, [pc, #632]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	039a      	lsls	r2, r3, #14
 8000ec6:	d5dc      	bpl.n	8000e82 <HAL_RCC_OscConfig+0x16>
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1d9      	bne.n	8000e82 <HAL_RCC_OscConfig+0x16>
 8000ece:	e7d1      	b.n	8000e74 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed0:	6862      	ldr	r2, [r4, #4]
 8000ed2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ed6:	d111      	bne.n	8000efc <HAL_RCC_OscConfig+0x90>
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ede:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fb38 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee4:	4e95      	ldr	r6, [pc, #596]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8000ee6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee8:	6833      	ldr	r3, [r6, #0]
 8000eea:	039b      	lsls	r3, r3, #14
 8000eec:	d4c9      	bmi.n	8000e82 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff fb31 	bl	8000554 <HAL_GetTick>
 8000ef2:	1b40      	subs	r0, r0, r5
 8000ef4:	2864      	cmp	r0, #100	; 0x64
 8000ef6:	d9f7      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8000ef8:	2003      	movs	r0, #3
 8000efa:	e7bc      	b.n	8000e76 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	4d8f      	ldr	r5, [pc, #572]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8000efe:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	d107      	bne.n	8000f16 <HAL_RCC_OscConfig+0xaa>
 8000f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0a:	602b      	str	r3, [r5, #0]
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f12:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f14:	e7e4      	b.n	8000ee0 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	602b      	str	r3, [r5, #0]
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d1db      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x74>
        tickstart = HAL_GetTick();
 8000f28:	f7ff fb14 	bl	8000554 <HAL_GetTick>
 8000f2c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	682b      	ldr	r3, [r5, #0]
 8000f30:	039f      	lsls	r7, r3, #14
 8000f32:	d5a6      	bpl.n	8000e82 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fb0e 	bl	8000554 <HAL_GetTick>
 8000f38:	1b80      	subs	r0, r0, r6
 8000f3a:	2864      	cmp	r0, #100	; 0x64
 8000f3c:	d9f7      	bls.n	8000f2e <HAL_RCC_OscConfig+0xc2>
 8000f3e:	e7db      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f40:	4b7e      	ldr	r3, [pc, #504]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	f012 0f0c 	tst.w	r2, #12
 8000f48:	d007      	beq.n	8000f5a <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f50:	2a08      	cmp	r2, #8
 8000f52:	d111      	bne.n	8000f78 <HAL_RCC_OscConfig+0x10c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	025e      	lsls	r6, r3, #9
 8000f58:	d40e      	bmi.n	8000f78 <HAL_RCC_OscConfig+0x10c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	4b78      	ldr	r3, [pc, #480]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	0795      	lsls	r5, r2, #30
 8000f60:	d502      	bpl.n	8000f68 <HAL_RCC_OscConfig+0xfc>
 8000f62:	68e2      	ldr	r2, [r4, #12]
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d185      	bne.n	8000e74 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	6921      	ldr	r1, [r4, #16]
 8000f6c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f70:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000f74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f76:	e787      	b.n	8000e88 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f78:	68e2      	ldr	r2, [r4, #12]
 8000f7a:	4b71      	ldr	r3, [pc, #452]	; (8001140 <HAL_RCC_OscConfig+0x2d4>)
 8000f7c:	b1b2      	cbz	r2, 8000fac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f82:	f7ff fae7 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f86:	4d6d      	ldr	r5, [pc, #436]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8000f88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	0798      	lsls	r0, r3, #30
 8000f8e:	d507      	bpl.n	8000fa0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	6922      	ldr	r2, [r4, #16]
 8000f94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f9c:	602b      	str	r3, [r5, #0]
 8000f9e:	e773      	b.n	8000e88 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fad8 	bl	8000554 <HAL_GetTick>
 8000fa4:	1b80      	subs	r0, r0, r6
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9ef      	bls.n	8000f8a <HAL_RCC_OscConfig+0x11e>
 8000faa:	e7a5      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8000fac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fae:	f7ff fad1 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4e62      	ldr	r6, [pc, #392]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8000fb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	6833      	ldr	r3, [r6, #0]
 8000fb8:	0799      	lsls	r1, r3, #30
 8000fba:	f57f af65 	bpl.w	8000e88 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fac9 	bl	8000554 <HAL_GetTick>
 8000fc2:	1b40      	subs	r0, r0, r5
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9f6      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x14a>
 8000fc8:	e796      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fca:	6962      	ldr	r2, [r4, #20]
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_RCC_OscConfig+0x2d8>)
 8000fce:	b17a      	cbz	r2, 8000ff0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fabe 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd8:	4e58      	ldr	r6, [pc, #352]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 8000fda:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fdc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000fde:	079f      	lsls	r7, r3, #30
 8000fe0:	f53f af56 	bmi.w	8000e90 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fab6 	bl	8000554 <HAL_GetTick>
 8000fe8:	1b40      	subs	r0, r0, r5
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f6      	bls.n	8000fdc <HAL_RCC_OscConfig+0x170>
 8000fee:	e783      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff faaf 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff6:	4e51      	ldr	r6, [pc, #324]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 8000ff8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000ffc:	0798      	lsls	r0, r3, #30
 8000ffe:	f57f af47 	bpl.w	8000e90 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001002:	f7ff faa7 	bl	8000554 <HAL_GetTick>
 8001006:	1b40      	subs	r0, r0, r5
 8001008:	2802      	cmp	r0, #2
 800100a:	d9f6      	bls.n	8000ffa <HAL_RCC_OscConfig+0x18e>
 800100c:	e774      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100e:	4b4b      	ldr	r3, [pc, #300]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8001010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001012:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001016:	d128      	bne.n	800106a <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	9201      	str	r2, [sp, #4]
 800101a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800102c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102e:	4d46      	ldr	r5, [pc, #280]	; (8001148 <HAL_RCC_OscConfig+0x2dc>)
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	05d9      	lsls	r1, r3, #23
 8001034:	d51b      	bpl.n	800106e <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001036:	68a3      	ldr	r3, [r4, #8]
 8001038:	4d40      	ldr	r5, [pc, #256]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 800103a:	2b01      	cmp	r3, #1
 800103c:	d127      	bne.n	800108e <HAL_RCC_OscConfig+0x222>
 800103e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001046:	f7ff fa85 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104a:	4e3c      	ldr	r6, [pc, #240]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 800104c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001052:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001054:	079b      	lsls	r3, r3, #30
 8001056:	d539      	bpl.n	80010cc <HAL_RCC_OscConfig+0x260>
    if(pwrclkchanged == SET)
 8001058:	2f00      	cmp	r7, #0
 800105a:	f43f af1d 	beq.w	8000e98 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800105e:	4a37      	ldr	r2, [pc, #220]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 8001060:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	e716      	b.n	8000e98 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800106a:	2700      	movs	r7, #0
 800106c:	e7df      	b.n	800102e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800106e:	682b      	ldr	r3, [r5, #0]
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001076:	f7ff fa6d 	bl	8000554 <HAL_GetTick>
 800107a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	05da      	lsls	r2, r3, #23
 8001080:	d4d9      	bmi.n	8001036 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001082:	f7ff fa67 	bl	8000554 <HAL_GetTick>
 8001086:	1b80      	subs	r0, r0, r6
 8001088:	2802      	cmp	r0, #2
 800108a:	d9f7      	bls.n	800107c <HAL_RCC_OscConfig+0x210>
 800108c:	e734      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	2b05      	cmp	r3, #5
 8001090:	d104      	bne.n	800109c <HAL_RCC_OscConfig+0x230>
 8001092:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	672b      	str	r3, [r5, #112]	; 0x70
 800109a:	e7d0      	b.n	800103e <HAL_RCC_OscConfig+0x1d2>
 800109c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	672a      	str	r2, [r5, #112]	; 0x70
 80010a4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010a6:	f022 0204 	bic.w	r2, r2, #4
 80010aa:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ca      	bne.n	8001046 <HAL_RCC_OscConfig+0x1da>
      tickstart = HAL_GetTick();
 80010b0:	f7ff fa50 	bl	8000554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010bc:	0798      	lsls	r0, r3, #30
 80010be:	d5cb      	bpl.n	8001058 <HAL_RCC_OscConfig+0x1ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f7ff fa48 	bl	8000554 <HAL_GetTick>
 80010c4:	1b80      	subs	r0, r0, r6
 80010c6:	4540      	cmp	r0, r8
 80010c8:	d9f7      	bls.n	80010ba <HAL_RCC_OscConfig+0x24e>
 80010ca:	e715      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010cc:	f7ff fa42 	bl	8000554 <HAL_GetTick>
 80010d0:	1b40      	subs	r0, r0, r5
 80010d2:	4540      	cmp	r0, r8
 80010d4:	d9bd      	bls.n	8001052 <HAL_RCC_OscConfig+0x1e6>
 80010d6:	e70f      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010d8:	4d18      	ldr	r5, [pc, #96]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
 80010da:	68ab      	ldr	r3, [r5, #8]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	f43f aec7 	beq.w	8000e74 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e6:	4e19      	ldr	r6, [pc, #100]	; (800114c <HAL_RCC_OscConfig+0x2e0>)
 80010e8:	2300      	movs	r3, #0
 80010ea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80010ec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ee:	d135      	bne.n	800115c <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 80010f0:	f7ff fa30 	bl	8000554 <HAL_GetTick>
 80010f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	0199      	lsls	r1, r3, #6
 80010fa:	d429      	bmi.n	8001150 <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010fc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001100:	4313      	orrs	r3, r2
 8001102:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001104:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001108:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800110a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800110e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001110:	0852      	lsrs	r2, r2, #1
 8001112:	3a01      	subs	r2, #1
 8001114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001118:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800111a:	2301      	movs	r3, #1
 800111c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800111e:	f7ff fa19 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001122:	4d06      	ldr	r5, [pc, #24]	; (800113c <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8001124:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	019a      	lsls	r2, r3, #6
 800112a:	f53f aeb9 	bmi.w	8000ea0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fa11 	bl	8000554 <HAL_GetTick>
 8001132:	1b00      	subs	r0, r0, r4
 8001134:	2802      	cmp	r0, #2
 8001136:	d9f6      	bls.n	8001126 <HAL_RCC_OscConfig+0x2ba>
 8001138:	e6de      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	42470000 	.word	0x42470000
 8001144:	42470e80 	.word	0x42470e80
 8001148:	40007000 	.word	0x40007000
 800114c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fa00 	bl	8000554 <HAL_GetTick>
 8001154:	1bc0      	subs	r0, r0, r7
 8001156:	2802      	cmp	r0, #2
 8001158:	d9cd      	bls.n	80010f6 <HAL_RCC_OscConfig+0x28a>
 800115a:	e6cd      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 800115c:	f7ff f9fa 	bl	8000554 <HAL_GetTick>
 8001160:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	f57f ae9b 	bpl.w	8000ea0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff f9f3 	bl	8000554 <HAL_GetTick>
 800116e:	1b00      	subs	r0, r0, r4
 8001170:	2802      	cmp	r0, #2
 8001172:	d9f6      	bls.n	8001162 <HAL_RCC_OscConfig+0x2f6>
 8001174:	e6c0      	b.n	8000ef8 <HAL_RCC_OscConfig+0x8c>
 8001176:	bf00      	nop

08001178 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001178:	4913      	ldr	r1, [pc, #76]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800117a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800117c:	688b      	ldr	r3, [r1, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b04      	cmp	r3, #4
 8001184:	d01c      	beq.n	80011c0 <HAL_RCC_GetSysClockFreq+0x48>
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800118a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800118c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001190:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001194:	bf14      	ite	ne
 8001196:	480d      	ldrne	r0, [pc, #52]	; (80011cc <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001198:	480d      	ldreq	r0, [pc, #52]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800119a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800119e:	bf18      	it	ne
 80011a0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a6:	fba1 0100 	umull	r0, r1, r1, r0
 80011aa:	f7ff f80d 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x50>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011b6:	3301      	adds	r3, #1
 80011b8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80011ba:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011be:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <HAL_RCC_GetSysClockFreq+0x54>)
 80011c2:	e7fc      	b.n	80011be <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80011c6:	e7fa      	b.n	80011be <HAL_RCC_GetSysClockFreq+0x46>
 80011c8:	40023800 	.word	0x40023800
 80011cc:	007a1200 	.word	0x007a1200
 80011d0:	00f42400 	.word	0x00f42400

080011d4 <HAL_RCC_ClockConfig>:
{
 80011d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80011da:	4604      	mov	r4, r0
 80011dc:	b910      	cbnz	r0, 80011e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
}
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <HAL_RCC_ClockConfig+0x120>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f002 020f 	and.w	r2, r2, #15
 80011ec:	428a      	cmp	r2, r1
 80011ee:	d327      	bcc.n	8001240 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	6822      	ldr	r2, [r4, #0]
 80011f2:	0797      	lsls	r7, r2, #30
 80011f4:	d42c      	bmi.n	8001250 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f6:	07d0      	lsls	r0, r2, #31
 80011f8:	d440      	bmi.n	800127c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_RCC_ClockConfig+0x120>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	f002 020f 	and.w	r2, r2, #15
 8001202:	42aa      	cmp	r2, r5
 8001204:	d865      	bhi.n	80012d2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	0751      	lsls	r1, r2, #29
 800120a:	d46b      	bmi.n	80012e4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120c:	0713      	lsls	r3, r2, #28
 800120e:	d507      	bpl.n	8001220 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001210:	4a39      	ldr	r2, [pc, #228]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 8001212:	6921      	ldr	r1, [r4, #16]
 8001214:	6893      	ldr	r3, [r2, #8]
 8001216:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800121a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800121e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001220:	f7ff ffaa 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_RCC_ClockConfig+0x128>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	40d8      	lsrs	r0, r3
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_RCC_ClockConfig+0x12c>)
 8001234:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff f942 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 800123c:	2000      	movs	r0, #0
 800123e:	e7cf      	b.n	80011e0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001240:	b2ca      	uxtb	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	428b      	cmp	r3, r1
 800124c:	d1c7      	bne.n	80011de <HAL_RCC_ClockConfig+0xa>
 800124e:	e7cf      	b.n	80011f0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 8001252:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001256:	bf1e      	ittt	ne
 8001258:	6899      	ldrne	r1, [r3, #8]
 800125a:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800125e:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001260:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001262:	bf42      	ittt	mi
 8001264:	6899      	ldrmi	r1, [r3, #8]
 8001266:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800126a:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4922      	ldr	r1, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 800126e:	68a0      	ldr	r0, [r4, #8]
 8001270:	688b      	ldr	r3, [r1, #8]
 8001272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001276:	4303      	orrs	r3, r0
 8001278:	608b      	str	r3, [r1, #8]
 800127a:	e7bc      	b.n	80011f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127c:	6862      	ldr	r2, [r4, #4]
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 8001280:	2a01      	cmp	r2, #1
 8001282:	d11c      	bne.n	80012be <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	d0a8      	beq.n	80011de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128c:	4e1a      	ldr	r6, [pc, #104]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 800128e:	68b3      	ldr	r3, [r6, #8]
 8001290:	f023 0303 	bic.w	r3, r3, #3
 8001294:	4313      	orrs	r3, r2
 8001296:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001298:	f7ff f95c 	bl	8000554 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80012a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	68b3      	ldr	r3, [r6, #8]
 80012a4:	6862      	ldr	r2, [r4, #4]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012ae:	d0a4      	beq.n	80011fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff f950 	bl	8000554 <HAL_GetTick>
 80012b4:	1bc0      	subs	r0, r0, r7
 80012b6:	4540      	cmp	r0, r8
 80012b8:	d9f3      	bls.n	80012a2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80012ba:	2003      	movs	r0, #3
 80012bc:	e790      	b.n	80011e0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	1e91      	subs	r1, r2, #2
 80012c0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c4:	d802      	bhi.n	80012cc <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012ca:	e7de      	b.n	800128a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	f013 0f02 	tst.w	r3, #2
 80012d0:	e7db      	b.n	800128a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	b2ea      	uxtb	r2, r5
 80012d4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	42ab      	cmp	r3, r5
 80012de:	f47f af7e 	bne.w	80011de <HAL_RCC_ClockConfig+0xa>
 80012e2:	e790      	b.n	8001206 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4904      	ldr	r1, [pc, #16]	; (80012f8 <HAL_RCC_ClockConfig+0x124>)
 80012e6:	68e0      	ldr	r0, [r4, #12]
 80012e8:	688b      	ldr	r3, [r1, #8]
 80012ea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012ee:	4303      	orrs	r3, r0
 80012f0:	608b      	str	r3, [r1, #8]
 80012f2:	e78b      	b.n	800120c <HAL_RCC_ClockConfig+0x38>
 80012f4:	40023c00 	.word	0x40023c00
 80012f8:	40023800 	.word	0x40023800
 80012fc:	08001718 	.word	0x08001718
 8001300:	20000008 	.word	0x20000008

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b530      	push	{r4, r5, lr}
 8001306:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001308:	2210      	movs	r2, #16
 800130a:	2100      	movs	r1, #0
 800130c:	a80a      	add	r0, sp, #40	; 0x28
 800130e:	f000 f9ef 	bl	80016f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001312:	2100      	movs	r1, #0
 8001314:	2214      	movs	r2, #20
 8001316:	a803      	add	r0, sp, #12
 8001318:	f000 f9ea 	bl	80016f0 <memset>

  /**Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	2400      	movs	r4, #0
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <SystemClock_Config+0x8c>)
 8001320:	9401      	str	r4, [sp, #4]
 8001322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <SystemClock_Config+0x90>)
 8001336:	9402      	str	r4, [sp, #8]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001354:	2502      	movs	r5, #2
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 800135a:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135c:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001362:	2304      	movs	r3, #4
 8001364:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001368:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f7ff fd7e 	bl	8000e6c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	e9cd 1306 	strd	r1, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001382:	a803      	add	r0, sp, #12
 8001384:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001388:	f7ff ff24 	bl	80011d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800138c:	b015      	add	sp, #84	; 0x54
 800138e:	bd30      	pop	{r4, r5, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000

08001398 <main>:
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800139c:	f7ff f8b4 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80013a0:	f7ff ffb0 	bl	8001304 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	2214      	movs	r2, #20
 80013a6:	2100      	movs	r1, #0
 80013a8:	eb0d 0002 	add.w	r0, sp, r2
 80013ac:	f000 f9a0 	bl	80016f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b0:	2400      	movs	r4, #0
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <main+0x10c>)
 80013b4:	9401      	str	r4, [sp, #4]
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013b8:	483b      	ldr	r0, [pc, #236]	; (80014a8 <main+0x110>)
  hcan1.Instance = CAN1;
 80013ba:	4d3c      	ldr	r5, [pc, #240]	; (80014ac <main+0x114>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	9402      	str	r4, [sp, #8]
 80013ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	f002 0201 	and.w	r2, r2, #1
 80013dc:	9202      	str	r2, [sp, #8]
 80013de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	9403      	str	r4, [sp, #12]
 80013e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e4:	f042 0208 	orr.w	r2, r2, #8
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	f002 0208 	and.w	r2, r2, #8
 80013f0:	9203      	str	r2, [sp, #12]
 80013f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	9404      	str	r4, [sp, #16]
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f042 0202 	orr.w	r2, r2, #2
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001404:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001408:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800140e:	f7ff fd1b 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <main+0x118>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	4827      	ldr	r0, [pc, #156]	; (80014b4 <main+0x11c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001416:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001418:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141c:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f7ff fc23 	bl	8000c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001426:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142a:	481f      	ldr	r0, [pc, #124]	; (80014a8 <main+0x110>)
 800142c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001436:	f7ff fc19 	bl	8000c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800143a:	4622      	mov	r2, r4
 800143c:	4621      	mov	r1, r4
 800143e:	2006      	movs	r0, #6
 8001440:	f7ff fbc0 	bl	8000bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001444:	2006      	movs	r0, #6
 8001446:	f7ff fbef 	bl	8000c28 <HAL_NVIC_EnableIRQ>
  hcan1.Init.Prescaler = 21;
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <main+0x120>)
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800144c:	61ac      	str	r4, [r5, #24]
  hcan1.Init.Prescaler = 21;
 800144e:	2315      	movs	r3, #21
 8001450:	e9c5 2300 	strd	r2, r3, [r5]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001454:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8001458:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800145c:	4628      	mov	r0, r5
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800145e:	e9c5 1304 	strd	r1, r3, [r5, #16]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001462:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001466:	83ac      	strh	r4, [r5, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001468:	f7ff f87a 	bl	8000560 <HAL_CAN_Init>
  HAL_CAN_Start(&hcan1);
 800146c:	4628      	mov	r0, r5
 800146e:	f7ff f97b 	bl	8000768 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // fifo0'a mesaj gelince aktif olsun interrupt
 8001472:	4639      	mov	r1, r7
 8001474:	4628      	mov	r0, r5
 8001476:	f7ff fa74 	bl	8000962 <HAL_CAN_ActivateNotification>
  pTxHeader.DLC = 1;      // Specifies the length of the frame that will be transmitted. (Biz 1 bytlık veri gönderiyoruz)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <main+0x124>)
  sFilterConfig.FilterActivation = ENABLE;      // Enable or disable the filter.
 800147c:	4910      	ldr	r1, [pc, #64]	; (80014c0 <main+0x128>)
  pTxHeader.DLC = 1;      // Specifies the length of the frame that will be transmitted. (Biz 1 bytlık veri gönderiyoruz)
 800147e:	611e      	str	r6, [r3, #16]
  pTxHeader.IDE = CAN_ID_EXT;       // Specifies the type of identifier for the message that will be transmitted.
 8001480:	2204      	movs	r2, #4
  pTxHeader.RTR = CAN_RTR_DATA;     /*!< Specifies the type of frame for the message that will be transmitted.
 8001482:	e9c3 2402 	strd	r2, r4, [r3, #8]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001486:	4628      	mov	r0, r5
  pTxHeader.ExtId = 0x12FB98;             /*!< Specifies the standard identifier. This parameter must be a number
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <main+0x12c>)
 800148a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800148c:	e9c1 4404 	strd	r4, r4, [r1, #16]
  sFilterConfig.FilterIdLow = 0x0000;
 8001490:	e9c1 4400 	strd	r4, r4, [r1]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001494:	e9c1 4402 	strd	r4, r4, [r1, #8]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001498:	e9c1 4606 	strd	r4, r6, [r1, #24]
  sFilterConfig.FilterActivation = ENABLE;      // Enable or disable the filter.
 800149c:	620e      	str	r6, [r1, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800149e:	f7ff f8db 	bl	8000658 <HAL_CAN_ConfigFilter>
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <main+0x10a>
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	20000090 	.word	0x20000090
 80014b0:	10110000 	.word	0x10110000
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40006400 	.word	0x40006400
 80014bc:	2000005c 	.word	0x2000005c
 80014c0:	20000030 	.word	0x20000030
 80014c4:	0012fb98 	.word	0x0012fb98

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_MspInit+0x38>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	9100      	str	r1, [sp, #0]
 80014d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
 80014d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014de:	9200      	str	r2, [sp, #0]
 80014e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	9101      	str	r1, [sp, #4]
 80014e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f6:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f8:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014fa:	f7ff bb51 	b.w	8000ba0 <HAL_NVIC_SetPriorityGrouping>
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001504:	b510      	push	{r4, lr}
 8001506:	4604      	mov	r4, r0
 8001508:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	2214      	movs	r2, #20
 800150c:	2100      	movs	r1, #0
 800150e:	a803      	add	r0, sp, #12
 8001510:	f000 f8ee 	bl	80016f0 <memset>
  if(hcan->Instance==CAN1)
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_CAN_MspInit+0x78>)
 8001518:	429a      	cmp	r2, r3
 800151a:	d12c      	bne.n	8001576 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800151c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001520:	2400      	movs	r4, #0
 8001522:	9401      	str	r4, [sp, #4]
 8001524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	4816      	ldr	r0, [pc, #88]	; (8001580 <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001528:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
 800152e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001530:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001534:	9201      	str	r2, [sp, #4]
 8001536:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	9402      	str	r4, [sp, #8]
 800153a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153c:	f042 0202 	orr.w	r2, r2, #2
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001558:	2103      	movs	r1, #3
 800155a:	2309      	movs	r3, #9
 800155c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	a903      	add	r1, sp, #12
 8001562:	f7ff fb83 	bl	8000c6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 1);
 8001566:	2014      	movs	r0, #20
 8001568:	2201      	movs	r2, #1
 800156a:	4621      	mov	r1, r4
 800156c:	f7ff fb2a 	bl	8000bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001570:	2014      	movs	r0, #20
 8001572:	f7ff fb59 	bl	8000c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001576:	b008      	add	sp, #32
 8001578:	bd10      	pop	{r4, pc}
 800157a:	bf00      	nop
 800157c:	40006400 	.word	0x40006400
 8001580:	40020400 	.word	0x40020400

08001584 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001584:	4770      	bx	lr

08001586 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler>

08001588 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler>

0800158a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler>

0800158c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler>

0800158e <SVC_Handler>:
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f7fe bfd2 	b.w	800053c <HAL_IncTick>

08001598 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001598:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
   for(int i = 0; i < 8000000; i++);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fc5a 	bl	8000e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <EXTI0_IRQHandler+0x2c>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	f7ff fc4a 	bl	8000e3c <HAL_GPIO_ReadPin>
 80015a8:	b150      	cbz	r0, 80015c0 <EXTI0_IRQHandler+0x28>
  {
    // Burada count verisini göndericegiz:
   count ++;
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <EXTI0_IRQHandler+0x30>)
   HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &count, &pTxMailbox); // 1 bytlık veri gönderiyoruz
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <EXTI0_IRQHandler+0x34>)
   count ++;
 80015ae:	7813      	ldrb	r3, [r2, #0]
   HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &count, &pTxMailbox); // 1 bytlık veri gönderiyoruz
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <EXTI0_IRQHandler+0x38>)
   count ++;
 80015b2:	3301      	adds	r3, #1
 80015b4:	7013      	strb	r3, [r2, #0]
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 80015b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &count, &pTxMailbox); // 1 bytlık veri gönderiyoruz
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <EXTI0_IRQHandler+0x3c>)
 80015bc:	f7ff b902 	b.w	80007c4 <HAL_CAN_AddTxMessage>
}
 80015c0:	bd10      	pop	{r4, pc}
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000
 80015c8:	20000028 	.word	0x20000028
 80015cc:	2000005c 	.word	0x2000005c
 80015d0:	20000090 	.word	0x20000090
 80015d4:	20000058 	.word	0x20000058

080015d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015d8:	b510      	push	{r4, lr}
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  // Burada  rcount gelen  veriyi alalım ve Ledleri sayıya göre yakalım :
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rcount);
 80015da:	4c07      	ldr	r4, [pc, #28]	; (80015f8 <CAN1_RX0_IRQHandler+0x20>)
  HAL_CAN_IRQHandler(&hcan1);
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <CAN1_RX0_IRQHandler+0x24>)
 80015de:	f7ff f9e1 	bl	80009a4 <HAL_CAN_IRQHandler>
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rcount);
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <CAN1_RX0_IRQHandler+0x28>)
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <CAN1_RX0_IRQHandler+0x24>)
 80015e6:	4623      	mov	r3, r4
 80015e8:	2100      	movs	r1, #0
 80015ea:	f7ff f93b 	bl	8000864 <HAL_CAN_GetRxMessage>

  GPIOD->ODR = rcount<<12;  // Gönderdigimz veriyi Led'lerde görelim .
 80015ee:	7823      	ldrb	r3, [r4, #0]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <CAN1_RX0_IRQHandler+0x2c>)
 80015f2:	031b      	lsls	r3, r3, #12
 80015f4:	6153      	str	r3, [r2, #20]
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015f6:	bd10      	pop	{r4, pc}
 80015f8:	20000029 	.word	0x20000029
 80015fc:	20000090 	.word	0x20000090
 8001600:	20000074 	.word	0x20000074
 8001604:	40020c00 	.word	0x40020c00

08001608 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	490f      	ldr	r1, [pc, #60]	; (8001648 <SystemInit+0x40>)
 800160a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800160e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <SystemInit+0x44>)
 8001618:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800161a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001622:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800162a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800162e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <SystemInit+0x48>)
 8001632:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800163a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800163c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800163e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001642:	608b      	str	r3, [r1, #8]
#endif
}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	40023800 	.word	0x40023800
 8001650:	24003010 	.word	0x24003010

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
  ldr  r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffc3 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f000 f811 	bl	80016a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fe87 	bl	8001398 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001690:	08001738 	.word	0x08001738
  ldr  r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001698:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800169c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016a0:	200000b8 	.word	0x200000b8

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <__libc_init_array>:
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	4d0d      	ldr	r5, [pc, #52]	; (80016e0 <__libc_init_array+0x38>)
 80016ac:	4c0d      	ldr	r4, [pc, #52]	; (80016e4 <__libc_init_array+0x3c>)
 80016ae:	1b64      	subs	r4, r4, r5
 80016b0:	10a4      	asrs	r4, r4, #2
 80016b2:	2600      	movs	r6, #0
 80016b4:	42a6      	cmp	r6, r4
 80016b6:	d109      	bne.n	80016cc <__libc_init_array+0x24>
 80016b8:	4d0b      	ldr	r5, [pc, #44]	; (80016e8 <__libc_init_array+0x40>)
 80016ba:	4c0c      	ldr	r4, [pc, #48]	; (80016ec <__libc_init_array+0x44>)
 80016bc:	f000 f820 	bl	8001700 <_init>
 80016c0:	1b64      	subs	r4, r4, r5
 80016c2:	10a4      	asrs	r4, r4, #2
 80016c4:	2600      	movs	r6, #0
 80016c6:	42a6      	cmp	r6, r4
 80016c8:	d105      	bne.n	80016d6 <__libc_init_array+0x2e>
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
 80016cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d0:	4798      	blx	r3
 80016d2:	3601      	adds	r6, #1
 80016d4:	e7ee      	b.n	80016b4 <__libc_init_array+0xc>
 80016d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016da:	4798      	blx	r3
 80016dc:	3601      	adds	r6, #1
 80016de:	e7f2      	b.n	80016c6 <__libc_init_array+0x1e>
 80016e0:	08001730 	.word	0x08001730
 80016e4:	08001730 	.word	0x08001730
 80016e8:	08001730 	.word	0x08001730
 80016ec:	08001734 	.word	0x08001734

080016f0 <memset>:
 80016f0:	4402      	add	r2, r0
 80016f2:	4603      	mov	r3, r0
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d100      	bne.n	80016fa <memset+0xa>
 80016f8:	4770      	bx	lr
 80016fa:	f803 1b01 	strb.w	r1, [r3], #1
 80016fe:	e7f9      	b.n	80016f4 <memset+0x4>

08001700 <_init>:
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	bf00      	nop
 8001704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001706:	bc08      	pop	{r3}
 8001708:	469e      	mov	lr, r3
 800170a:	4770      	bx	lr

0800170c <_fini>:
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	bf00      	nop
 8001710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001712:	bc08      	pop	{r3}
 8001714:	469e      	mov	lr, r3
 8001716:	4770      	bx	lr
