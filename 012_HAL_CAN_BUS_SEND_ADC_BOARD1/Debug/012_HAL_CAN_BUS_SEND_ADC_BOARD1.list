
012_HAL_CAN_BUS_SEND_ADC_BOARD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001e14  08001e14  00011e14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000138  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000144  20000144  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009584  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001db7  00000000  00000000  000295c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000030d9  00000000  00000000  0002b377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000588  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020975  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e33  00000000  00000000  0004facd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf90  00000000  00000000  00058900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e8c  00000000  00000000  001238e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001dfc 	.word	0x08001dfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001dfc 	.word	0x08001dfc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_InitTick+0x3c>)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
{
 80004c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c8:	7818      	ldrb	r0, [r3, #0]
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 fd62 	bl	8000fa0 <HAL_SYSTICK_Config>
 80004dc:	4604      	mov	r4, r0
 80004de:	b958      	cbnz	r0, 80004f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e0:	2d0f      	cmp	r5, #15
 80004e2:	d809      	bhi.n	80004f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e4:	4602      	mov	r2, r0
 80004e6:	4629      	mov	r1, r5
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f000 fd18 	bl	8000f20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_InitTick+0x44>)
 80004f2:	4620      	mov	r0, r4
 80004f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7fc      	b.n	80004f6 <HAL_InitTick+0x36>
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000000 	.word	0x20000000
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 fce9 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f001 fb26 	bl	8001b80 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_IncTick+0x14>)
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028

08000560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000560:	b538      	push	{r3, r4, r5, lr}
 8000562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff fff6 	bl	8000554 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000568:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf1c      	itt	ne
 800056c:	4b05      	ldrne	r3, [pc, #20]	; (8000584 <HAL_Delay+0x24>)
 800056e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000570:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000572:	bf18      	it	ne
 8000574:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000576:	f7ff ffed 	bl	8000554 <HAL_GetTick>
 800057a:	1b43      	subs	r3, r0, r5
 800057c:	42a3      	cmp	r3, r4
 800057e:	d3fa      	bcc.n	8000576 <HAL_Delay+0x16>
  {
  }
}
 8000580:	bd38      	pop	{r3, r4, r5, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800058a:	4604      	mov	r4, r0
 800058c:	2800      	cmp	r0, #0
 800058e:	f000 809b 	beq.w	80006c8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000592:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000594:	b925      	cbnz	r5, 80005a0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000596:	f001 fb11 	bl	8001bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800059a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800059c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a2:	06db      	lsls	r3, r3, #27
 80005a4:	f100 808e 	bmi.w	80006c4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005ae:	f023 0302 	bic.w	r3, r3, #2
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005b8:	4b44      	ldr	r3, [pc, #272]	; (80006cc <HAL_ADC_Init+0x144>)
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005c0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	6861      	ldr	r1, [r4, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ca:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005cc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005de:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005e2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ee:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005fe:	4934      	ldr	r1, [pc, #208]	; (80006d0 <HAL_ADC_Init+0x148>)
 8000600:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000602:	428a      	cmp	r2, r1
 8000604:	d052      	beq.n	80006ac <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000606:	6899      	ldr	r1, [r3, #8]
 8000608:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800060c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800060e:	6899      	ldr	r1, [r3, #8]
 8000610:	430a      	orrs	r2, r1
 8000612:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000614:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000616:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800061c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000622:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	f022 0202 	bic.w	r2, r2, #2
 800062a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	7e21      	ldrb	r1, [r4, #24]
 8000630:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000636:	f894 2020 	ldrb.w	r2, [r4, #32]
 800063a:	2a00      	cmp	r2, #0
 800063c:	d03e      	beq.n	80006bc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800063e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000640:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800064e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	3901      	subs	r1, #1
 8000654:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000658:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800065c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000666:	3901      	subs	r1, #1
 8000668:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800067c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000680:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000682:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000684:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800068a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800068c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800068e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000690:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000694:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000696:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800069a:	f023 0303 	bic.w	r3, r3, #3
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006a4:	2300      	movs	r3, #0
 80006a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80006aa:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ba:	e7b2      	b.n	8000622 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006c2:	e7c9      	b.n	8000658 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
 80006c6:	e7ed      	b.n	80006a4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006c8:	2001      	movs	r0, #1
 80006ca:	e7ee      	b.n	80006aa <HAL_ADC_Init+0x122>
 80006cc:	40012300 	.word	0x40012300
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <HAL_ADC_Start_DMA>:
{
 80006d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80006d6:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80006d8:	2200      	movs	r2, #0
 80006da:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80006dc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80006e0:	2a01      	cmp	r2, #1
{
 80006e2:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80006e4:	f000 808c 	beq.w	8000800 <HAL_ADC_Start_DMA+0x12c>
 80006e8:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006ea:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 80006ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006f0:	68b2      	ldr	r2, [r6, #8]
 80006f2:	07d4      	lsls	r4, r2, #31
 80006f4:	d554      	bpl.n	80007a0 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80006f6:	68b2      	ldr	r2, [r6, #8]
 80006f8:	05d0      	lsls	r0, r2, #23
 80006fa:	d464      	bmi.n	80007c6 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006fc:	68b4      	ldr	r4, [r6, #8]
 80006fe:	f014 0401 	ands.w	r4, r4, #1
 8000702:	d074      	beq.n	80007ee <HAL_ADC_Start_DMA+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8000704:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000706:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800070a:	f020 0001 	bic.w	r0, r0, #1
 800070e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000712:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000714:	6872      	ldr	r2, [r6, #4]
 8000716:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000718:	bf41      	itttt	mi
 800071a:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 800071c:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000720:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000724:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000726:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000728:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800072a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800072e:	bf1c      	itt	ne
 8000730:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 8000732:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000736:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000738:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800073a:	4a33      	ldr	r2, [pc, #204]	; (8000808 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 800073c:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000740:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <HAL_ADC_Start_DMA+0x138>)
 8000744:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000746:	4a32      	ldr	r2, [pc, #200]	; (8000810 <HAL_ADC_Start_DMA+0x13c>)
 8000748:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800074a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800074e:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000750:	6872      	ldr	r2, [r6, #4]
 8000752:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000756:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000758:	68b2      	ldr	r2, [r6, #8]
 800075a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800075e:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000760:	460a      	mov	r2, r1
 8000762:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8000766:	f000 fcc7 	bl	80010f8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <HAL_ADC_Start_DMA+0x140>)
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	6850      	ldr	r0, [r2, #4]
 8000770:	4929      	ldr	r1, [pc, #164]	; (8000818 <HAL_ADC_Start_DMA+0x144>)
 8000772:	f010 001f 	ands.w	r0, r0, #31
 8000776:	d132      	bne.n	80007de <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000778:	428b      	cmp	r3, r1
 800077a:	d007      	beq.n	800078c <HAL_ADC_Start_DMA+0xb8>
 800077c:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000780:	428b      	cmp	r3, r1
 8000782:	d125      	bne.n	80007d0 <HAL_ADC_Start_DMA+0xfc>
 8000784:	6852      	ldr	r2, [r2, #4]
 8000786:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800078a:	d107      	bne.n	800079c <HAL_ADC_Start_DMA+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800078c:	6898      	ldr	r0, [r3, #8]
 800078e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000792:	d137      	bne.n	8000804 <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800079a:	609a      	str	r2, [r3, #8]
}
 800079c:	b002      	add	sp, #8
 800079e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80007a0:	68b2      	ldr	r2, [r6, #8]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007a8:	4a1c      	ldr	r2, [pc, #112]	; (800081c <HAL_ADC_Start_DMA+0x148>)
 80007aa:	6810      	ldr	r0, [r2, #0]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <HAL_ADC_Start_DMA+0x14c>)
 80007ae:	fbb0 f0f2 	udiv	r0, r0, r2
 80007b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007b6:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80007b8:	9a01      	ldr	r2, [sp, #4]
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d09b      	beq.n	80006f6 <HAL_ADC_Start_DMA+0x22>
      counter--;
 80007be:	9a01      	ldr	r2, [sp, #4]
 80007c0:	3a01      	subs	r2, #1
 80007c2:	9201      	str	r2, [sp, #4]
 80007c4:	e7f8      	b.n	80007b8 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80007c6:	68b2      	ldr	r2, [r6, #8]
 80007c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007cc:	60b2      	str	r2, [r6, #8]
 80007ce:	e795      	b.n	80006fc <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007d0:	4914      	ldr	r1, [pc, #80]	; (8000824 <HAL_ADC_Start_DMA+0x150>)
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d1e2      	bne.n	800079c <HAL_ADC_Start_DMA+0xc8>
 80007d6:	6852      	ldr	r2, [r2, #4]
 80007d8:	f012 0f10 	tst.w	r2, #16
 80007dc:	e7d5      	b.n	800078a <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007de:	428b      	cmp	r3, r1
 80007e0:	d110      	bne.n	8000804 <HAL_ADC_Start_DMA+0x130>
 80007e2:	6898      	ldr	r0, [r3, #8]
 80007e4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007e8:	d0d4      	beq.n	8000794 <HAL_ADC_Start_DMA+0xc0>
  return HAL_OK;
 80007ea:	4620      	mov	r0, r4
 80007ec:	e7d6      	b.n	800079c <HAL_ADC_Start_DMA+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	646b      	str	r3, [r5, #68]	; 0x44
 80007fe:	e7f4      	b.n	80007ea <HAL_ADC_Start_DMA+0x116>
  __HAL_LOCK(hadc);
 8000800:	2002      	movs	r0, #2
 8000802:	e7cb      	b.n	800079c <HAL_ADC_Start_DMA+0xc8>
  return HAL_OK;
 8000804:	2000      	movs	r0, #0
 8000806:	e7c9      	b.n	800079c <HAL_ADC_Start_DMA+0xc8>
 8000808:	0800084f 	.word	0x0800084f
 800080c:	0800082d 	.word	0x0800082d
 8000810:	08000839 	.word	0x08000839
 8000814:	40012300 	.word	0x40012300
 8000818:	40012000 	.word	0x40012000
 800081c:	20000008 	.word	0x20000008
 8000820:	000f4240 	.word	0x000f4240
 8000824:	40012200 	.word	0x40012200

08000828 <HAL_ADC_ConvCpltCallback>:
 8000828:	4770      	bx	lr

0800082a <HAL_ADC_ConvHalfCpltCallback>:
 800082a:	4770      	bx	lr

0800082c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800082c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800082e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000830:	f7ff fffb 	bl	800082a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000834:	bd08      	pop	{r3, pc}

08000836 <HAL_ADC_ErrorCallback>:
 8000836:	4770      	bx	lr

08000838 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000838:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800083a:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000840:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000848:	f7ff fff5 	bl	8000836 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800084c:	bd08      	pop	{r3, pc}

0800084e <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800084e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000852:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000856:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800085a:	d123      	bne.n	80008a4 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800085c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	6891      	ldr	r1, [r2, #8]
 8000866:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800086a:	d117      	bne.n	800089c <ADC_DMAConvCplt+0x4e>
 800086c:	7e19      	ldrb	r1, [r3, #24]
 800086e:	b9a9      	cbnz	r1, 800089c <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000870:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000872:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000876:	d002      	beq.n	800087e <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000878:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800087a:	0548      	lsls	r0, r1, #21
 800087c:	d40e      	bmi.n	800089c <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800087e:	6851      	ldr	r1, [r2, #4]
 8000880:	f021 0120 	bic.w	r1, r1, #32
 8000884:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800088c:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800088e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000890:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000892:	bf5e      	ittt	pl
 8000894:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8000896:	f042 0201 	orrpl.w	r2, r2, #1
 800089a:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffc3 	bl	8000828 <HAL_ADC_ConvCpltCallback>
}
 80008a2:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80008a4:	06d2      	lsls	r2, r2, #27
 80008a6:	d503      	bpl.n	80008b0 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffc4 	bl	8000836 <HAL_ADC_ErrorCallback>
 80008ae:	e7f8      	b.n	80008a2 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80008b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4718      	bx	r3
	...

080008bc <HAL_ADC_ConfigChannel>:
{
 80008bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008be:	2300      	movs	r3, #0
 80008c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d066      	beq.n	8000998 <HAL_ADC_ConfigChannel+0xdc>
 80008ca:	2301      	movs	r3, #1
 80008cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008d0:	680d      	ldr	r5, [r1, #0]
 80008d2:	6803      	ldr	r3, [r0, #0]
 80008d4:	688e      	ldr	r6, [r1, #8]
 80008d6:	2d09      	cmp	r5, #9
 80008d8:	b2ac      	uxth	r4, r5
 80008da:	d931      	bls.n	8000940 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80008e0:	68df      	ldr	r7, [r3, #12]
 80008e2:	3a1e      	subs	r2, #30
 80008e4:	f04f 0c07 	mov.w	ip, #7
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	ea27 070c 	bic.w	r7, r7, ip
 80008f0:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008f2:	68df      	ldr	r7, [r3, #12]
 80008f4:	fa06 f202 	lsl.w	r2, r6, r2
 80008f8:	433a      	orrs	r2, r7
 80008fa:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80008fc:	6849      	ldr	r1, [r1, #4]
 80008fe:	2906      	cmp	r1, #6
 8000900:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000904:	d82c      	bhi.n	8000960 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000908:	3a05      	subs	r2, #5
 800090a:	261f      	movs	r6, #31
 800090c:	4096      	lsls	r6, r2
 800090e:	ea21 0106 	bic.w	r1, r1, r6
 8000912:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000916:	fa04 f202 	lsl.w	r2, r4, r2
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <HAL_ADC_ConfigChannel+0x114>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d107      	bne.n	8000934 <HAL_ADC_ConfigChannel+0x78>
 8000924:	2d12      	cmp	r5, #18
 8000926:	d139      	bne.n	800099c <HAL_ADC_ConfigChannel+0xe0>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000928:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000930:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8000934:	2300      	movs	r3, #0
 8000936:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800093a:	4618      	mov	r0, r3
}
 800093c:	b003      	add	sp, #12
 800093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000940:	691f      	ldr	r7, [r3, #16]
 8000942:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8000946:	f04f 0c07 	mov.w	ip, #7
 800094a:	fa0c fc02 	lsl.w	ip, ip, r2
 800094e:	ea27 070c 	bic.w	r7, r7, ip
 8000952:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000954:	691f      	ldr	r7, [r3, #16]
 8000956:	fa06 f202 	lsl.w	r2, r6, r2
 800095a:	433a      	orrs	r2, r7
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	e7cd      	b.n	80008fc <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000960:	290c      	cmp	r1, #12
 8000962:	f04f 011f 	mov.w	r1, #31
 8000966:	d80b      	bhi.n	8000980 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000968:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800096a:	3a23      	subs	r2, #35	; 0x23
 800096c:	4091      	lsls	r1, r2
 800096e:	ea26 0101 	bic.w	r1, r6, r1
 8000972:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000974:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000976:	fa04 f202 	lsl.w	r2, r4, r2
 800097a:	430a      	orrs	r2, r1
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
 800097e:	e7ce      	b.n	800091e <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000980:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000982:	3a41      	subs	r2, #65	; 0x41
 8000984:	4091      	lsls	r1, r2
 8000986:	ea26 0101 	bic.w	r1, r6, r1
 800098a:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800098c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800098e:	fa04 f202 	lsl.w	r2, r4, r2
 8000992:	430a      	orrs	r2, r1
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
 8000996:	e7c2      	b.n	800091e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000998:	2002      	movs	r0, #2
 800099a:	e7cf      	b.n	800093c <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800099c:	f1a5 0310 	sub.w	r3, r5, #16
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d8c7      	bhi.n	8000934 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <HAL_ADC_ConfigChannel+0x118>)
 80009a6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009a8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009ae:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009b0:	d1c0      	bne.n	8000934 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_ADC_ConfigChannel+0x11c>)
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <HAL_ADC_ConfigChannel+0x120>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80009bc:	230a      	movs	r3, #10
 80009be:	4353      	muls	r3, r2
        counter--;
 80009c0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009c2:	9b01      	ldr	r3, [sp, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0b5      	beq.n	8000934 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 80009c8:	9b01      	ldr	r3, [sp, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	e7f8      	b.n	80009c0 <HAL_ADC_ConfigChannel+0x104>
 80009ce:	bf00      	nop
 80009d0:	40012000 	.word	0x40012000
 80009d4:	40012300 	.word	0x40012300
 80009d8:	20000008 	.word	0x20000008
 80009dc:	000f4240 	.word	0x000f4240

080009e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009e2:	4604      	mov	r4, r0
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d06e      	beq.n	8000ac6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009e8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80009ec:	b90b      	cbnz	r3, 80009f2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ee:	f001 f933 	bl	8001c58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009f2:	6822      	ldr	r2, [r4, #0]
 80009f4:	6813      	ldr	r3, [r2, #0]
 80009f6:	f023 0302 	bic.w	r3, r3, #2
 80009fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009fc:	f7ff fdaa 	bl	8000554 <HAL_GetTick>
 8000a00:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	0791      	lsls	r1, r2, #30
 8000a08:	d451      	bmi.n	8000aae <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f042 0201 	orr.w	r2, r2, #1
 8000a10:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a12:	f7ff fd9f 	bl	8000554 <HAL_GetTick>
 8000a16:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	07d2      	lsls	r2, r2, #31
 8000a1e:	d554      	bpl.n	8000aca <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a20:	7e22      	ldrb	r2, [r4, #24]
 8000a22:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	bf0c      	ite	eq
 8000a28:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a2c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a32:	7e62      	ldrb	r2, [r4, #25]
 8000a34:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	bf0c      	ite	eq
 8000a3a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a3e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a44:	7ea2      	ldrb	r2, [r4, #26]
 8000a46:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	bf0c      	ite	eq
 8000a4c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a50:	f022 0220 	bicne.w	r2, r2, #32
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a56:	7ee2      	ldrb	r2, [r4, #27]
 8000a58:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	bf0c      	ite	eq
 8000a5e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a62:	f042 0210 	orrne.w	r2, r2, #16
 8000a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a68:	7f22      	ldrb	r2, [r4, #28]
 8000a6a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	bf0c      	ite	eq
 8000a70:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a74:	f022 0208 	bicne.w	r2, r2, #8
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a7a:	7f62      	ldrb	r2, [r4, #29]
 8000a7c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	bf0c      	ite	eq
 8000a82:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a86:	f022 0204 	bicne.w	r2, r2, #4
 8000a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a8c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	6921      	ldr	r1, [r4, #16]
 8000a94:	430a      	orrs	r2, r1
 8000a96:	6961      	ldr	r1, [r4, #20]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	6861      	ldr	r1, [r4, #4]
 8000a9c:	3901      	subs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aa2:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000aa4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aa6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000aa8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000aac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aae:	f7ff fd51 	bl	8000554 <HAL_GetTick>
 8000ab2:	1b40      	subs	r0, r0, r5
 8000ab4:	280a      	cmp	r0, #10
 8000ab6:	d9a4      	bls.n	8000a02 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	e7f0      	b.n	8000aac <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aca:	f7ff fd43 	bl	8000554 <HAL_GetTick>
 8000ace:	1b40      	subs	r0, r0, r5
 8000ad0:	280a      	cmp	r0, #10
 8000ad2:	d9a1      	bls.n	8000a18 <HAL_CAN_Init+0x38>
 8000ad4:	e7f0      	b.n	8000ab8 <HAL_CAN_Init+0xd8>
	...

08000ad8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ad8:	b530      	push	{r4, r5, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ada:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d878      	bhi.n	8000bd6 <HAL_CAN_ConfigFilter+0xfe>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ae4:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <HAL_CAN_ConfigFilter+0x10c>)
 8000ae6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000aea:	f042 0201 	orr.w	r2, r2, #1
 8000aee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000af2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000af6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000afa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000afe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b02:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000b04:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000b08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b0c:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b0e:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b12:	2401      	movs	r4, #1
 8000b14:	f002 001f 	and.w	r0, r2, #31
 8000b18:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b1c:	ea25 0500 	bic.w	r5, r5, r0
 8000b20:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b24:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b26:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d135      	bne.n	8000b98 <HAL_CAN_ConfigFilter+0xc0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b2c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000b30:	4025      	ands	r5, r4
 8000b32:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b36:	68cb      	ldr	r3, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b38:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b3e:	00d3      	lsls	r3, r2, #3
 8000b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b44:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b48:	880a      	ldrh	r2, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b4a:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b4e:	688d      	ldr	r5, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b50:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b54:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b58:	698a      	ldr	r2, [r1, #24]
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <HAL_CAN_ConfigFilter+0x10c>)
 8000b5c:	bb8a      	cbnz	r2, 8000bc2 <HAL_CAN_ConfigFilter+0xea>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b62:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b68:	690a      	ldr	r2, [r1, #16]
 8000b6a:	bb72      	cbnz	r2, 8000bca <HAL_CAN_ConfigFilter+0xf2>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b70:	4014      	ands	r4, r2
 8000b72:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b76:	6a0b      	ldr	r3, [r1, #32]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <HAL_CAN_ConfigFilter+0x10c>)
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b7c:	bf02      	ittt	eq
 8000b7e:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000b82:	4310      	orreq	r0, r2
 8000b84:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b8c:	f022 0201 	bic.w	r2, r2, #1
 8000b90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b94:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000b96:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b98:	2d01      	cmp	r5, #1
 8000b9a:	d1dd      	bne.n	8000b58 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b9c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000ba0:	4305      	orrs	r5, r0
 8000ba2:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ba6:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ba8:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000baa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bae:	00d3      	lsls	r3, r2, #3
 8000bb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bb4:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bb8:	898a      	ldrh	r2, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bba:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bbe:	688d      	ldr	r5, [r1, #8]
 8000bc0:	e7c6      	b.n	8000b50 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bc6:	4302      	orrs	r2, r0
 8000bc8:	e7cc      	b.n	8000b64 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bce:	4302      	orrs	r2, r0
 8000bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bd4:	e7cf      	b.n	8000b76 <HAL_CAN_ConfigFilter+0x9e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
 8000be0:	e7d9      	b.n	8000b96 <HAL_CAN_ConfigFilter+0xbe>
 8000be2:	bf00      	nop
 8000be4:	40006400 	.word	0x40006400

08000be8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000be8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bea:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000bee:	2b01      	cmp	r3, #1
{
 8000bf0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000bf2:	b2dd      	uxtb	r5, r3
 8000bf4:	d120      	bne.n	8000c38 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bf6:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f023 0301 	bic.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c06:	f7ff fca5 	bl	8000554 <HAL_GetTick>
 8000c0a:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f013 0301 	ands.w	r3, r3, #1
 8000c14:	d102      	bne.n	8000c1c <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c16:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c18:	461d      	mov	r5, r3
 8000c1a:	e00b      	b.n	8000c34 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c1c:	f7ff fc9a 	bl	8000554 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	280a      	cmp	r0, #10
 8000c24:	d9f2      	bls.n	8000c0c <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000c34:	4628      	mov	r0, r5
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c3e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000c40:	2501      	movs	r5, #1
 8000c42:	e7f7      	b.n	8000c34 <HAL_CAN_Start+0x4c>

08000c44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c46:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c4a:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c4c:	3d01      	subs	r5, #1
 8000c4e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c50:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000c52:	d843      	bhi.n	8000cdc <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c54:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000c58:	d03c      	beq.n	8000cd4 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c5a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c5e:	2c03      	cmp	r4, #3
 8000c60:	f04f 0501 	mov.w	r5, #1
 8000c64:	d105      	bne.n	8000c72 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c6c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	e02a      	b.n	8000cc8 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c72:	40a5      	lsls	r5, r4
 8000c74:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000c76:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000c7a:	f104 0318 	add.w	r3, r4, #24
 8000c7e:	bb20      	cbnz	r0, 8000cca <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c80:	6808      	ldr	r0, [r1, #0]
 8000c82:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c8a:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8000c8e:	690d      	ldr	r5, [r1, #16]
 8000c90:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c94:	7d09      	ldrb	r1, [r1, #20]
 8000c96:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c98:	bf08      	it	eq
 8000c9a:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000c9e:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8000ca2:	bf04      	itt	eq
 8000ca4:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000ca8:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cac:	4406      	add	r6, r0
 8000cae:	6851      	ldr	r1, [r2, #4]
 8000cb0:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cba:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000cc6:	2000      	movs	r0, #0
  }
}
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cca:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000ccc:	4338      	orrs	r0, r7
 8000cce:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000cd2:	e7d8      	b.n	8000c86 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cda:	e7c7      	b.n	8000c6c <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	e7c3      	b.n	8000c6c <HAL_CAN_AddTxMessage+0x28>

08000ce4 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000ce8:	4770      	bx	lr

08000cea <HAL_CAN_TxMailbox0AbortCallback>:
 8000cea:	4770      	bx	lr

08000cec <HAL_CAN_TxMailbox1AbortCallback>:
 8000cec:	4770      	bx	lr

08000cee <HAL_CAN_TxMailbox2AbortCallback>:
 8000cee:	4770      	bx	lr

08000cf0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000cf0:	4770      	bx	lr

08000cf2 <HAL_CAN_RxFifo0FullCallback>:
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_CAN_RxFifo1FullCallback>:
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_CAN_SleepCallback>:
 8000cf8:	4770      	bx	lr

08000cfa <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000cfa:	4770      	bx	lr

08000cfc <HAL_CAN_ErrorCallback>:
 8000cfc:	4770      	bx	lr

08000cfe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000cfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d02:	6803      	ldr	r3, [r0, #0]
 8000d04:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d06:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d0a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d0c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000d10:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000d14:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000d18:	f016 0401 	ands.w	r4, r6, #1
{
 8000d1c:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000d1e:	d022      	beq.n	8000d66 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000d20:	f017 0401 	ands.w	r4, r7, #1
 8000d24:	d007      	beq.n	8000d36 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000d26:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d28:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000d2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d2c:	f140 80a5 	bpl.w	8000e7a <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d30:	f7ff ffd8 	bl	8000ce4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d34:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d36:	05fb      	lsls	r3, r7, #23
 8000d38:	d509      	bpl.n	8000d4e <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d3a:	682b      	ldr	r3, [r5, #0]
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d40:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d42:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d44:	f140 80a7 	bpl.w	8000e96 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f7ff ffcc 	bl	8000ce6 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d4e:	03fb      	lsls	r3, r7, #15
 8000d50:	d509      	bpl.n	8000d66 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d58:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d5a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d5c:	f140 80a9 	bpl.w	8000eb2 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d60:	4628      	mov	r0, r5
 8000d62:	f7ff ffc1 	bl	8000ce8 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000d66:	0733      	lsls	r3, r6, #28
 8000d68:	d507      	bpl.n	8000d7a <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000d6a:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d6e:	bf1f      	itttt	ne
 8000d70:	682b      	ldrne	r3, [r5, #0]
 8000d72:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000d74:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d78:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000d7a:	0777      	lsls	r7, r6, #29
 8000d7c:	d508      	bpl.n	8000d90 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d7e:	f01b 0f08 	tst.w	fp, #8
 8000d82:	d005      	beq.n	8000d90 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	2208      	movs	r2, #8
 8000d88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f7ff ffb1 	bl	8000cf2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d90:	07b0      	lsls	r0, r6, #30
 8000d92:	d506      	bpl.n	8000da2 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0799      	lsls	r1, r3, #30
 8000d9a:	d002      	beq.n	8000da2 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	f7ff ffa7 	bl	8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000da2:	0672      	lsls	r2, r6, #25
 8000da4:	d507      	bpl.n	8000db6 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000da6:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000daa:	bf1f      	itttt	ne
 8000dac:	682b      	ldrne	r3, [r5, #0]
 8000dae:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000db0:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000db4:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000db6:	06b3      	lsls	r3, r6, #26
 8000db8:	d508      	bpl.n	8000dcc <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000dba:	f01a 0f08 	tst.w	sl, #8
 8000dbe:	d005      	beq.n	8000dcc <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f7ff ff95 	bl	8000cf6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000dcc:	06f7      	lsls	r7, r6, #27
 8000dce:	d506      	bpl.n	8000dde <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	0798      	lsls	r0, r3, #30
 8000dd6:	d002      	beq.n	8000dde <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000dd8:	4628      	mov	r0, r5
 8000dda:	f7ff ff8b 	bl	8000cf4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000dde:	03b1      	lsls	r1, r6, #14
 8000de0:	d508      	bpl.n	8000df4 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000de2:	f019 0f10 	tst.w	r9, #16
 8000de6:	d005      	beq.n	8000df4 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	2210      	movs	r2, #16
 8000dec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000dee:	4628      	mov	r0, r5
 8000df0:	f7ff ff82 	bl	8000cf8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000df4:	03f2      	lsls	r2, r6, #15
 8000df6:	d508      	bpl.n	8000e0a <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000df8:	f019 0f08 	tst.w	r9, #8
 8000dfc:	d005      	beq.n	8000e0a <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	2208      	movs	r2, #8
 8000e02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000e04:	4628      	mov	r0, r5
 8000e06:	f7ff ff78 	bl	8000cfa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000e0a:	0433      	lsls	r3, r6, #16
 8000e0c:	d52c      	bpl.n	8000e68 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000e0e:	f019 0f04 	tst.w	r9, #4
 8000e12:	682a      	ldr	r2, [r5, #0]
 8000e14:	d026      	beq.n	8000e64 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e16:	05f7      	lsls	r7, r6, #23
 8000e18:	d504      	bpl.n	8000e24 <HAL_CAN_IRQHandler+0x126>
 8000e1a:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e1e:	bf18      	it	ne
 8000e20:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e24:	05b0      	lsls	r0, r6, #22
 8000e26:	d504      	bpl.n	8000e32 <HAL_CAN_IRQHandler+0x134>
 8000e28:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e2c:	bf18      	it	ne
 8000e2e:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e32:	0571      	lsls	r1, r6, #21
 8000e34:	d504      	bpl.n	8000e40 <HAL_CAN_IRQHandler+0x142>
 8000e36:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e3a:	bf18      	it	ne
 8000e3c:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e40:	0533      	lsls	r3, r6, #20
 8000e42:	d50f      	bpl.n	8000e64 <HAL_CAN_IRQHandler+0x166>
 8000e44:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000e48:	d00c      	beq.n	8000e64 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e4a:	2b40      	cmp	r3, #64	; 0x40
 8000e4c:	d04f      	beq.n	8000eee <HAL_CAN_IRQHandler+0x1f0>
 8000e4e:	d83e      	bhi.n	8000ece <HAL_CAN_IRQHandler+0x1d0>
 8000e50:	2b20      	cmp	r3, #32
 8000e52:	d046      	beq.n	8000ee2 <HAL_CAN_IRQHandler+0x1e4>
 8000e54:	2b30      	cmp	r3, #48	; 0x30
 8000e56:	d047      	beq.n	8000ee8 <HAL_CAN_IRQHandler+0x1ea>
 8000e58:	2b10      	cmp	r3, #16
 8000e5a:	d03f      	beq.n	8000edc <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000e5c:	6993      	ldr	r3, [r2, #24]
 8000e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e62:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e64:	2304      	movs	r3, #4
 8000e66:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e68:	b12c      	cbz	r4, 8000e76 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e6c:	431c      	orrs	r4, r3
 8000e6e:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e70:	4628      	mov	r0, r5
 8000e72:	f7ff ff43 	bl	8000cfc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e7a:	077a      	lsls	r2, r7, #29
 8000e7c:	d405      	bmi.n	8000e8a <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e7e:	f017 0408 	ands.w	r4, r7, #8
 8000e82:	d105      	bne.n	8000e90 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e84:	f7ff ff31 	bl	8000cea <HAL_CAN_TxMailbox0AbortCallback>
 8000e88:	e755      	b.n	8000d36 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e8a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000e8e:	e752      	b.n	8000d36 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e90:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000e94:	e74f      	b.n	8000d36 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e96:	0579      	lsls	r1, r7, #21
 8000e98:	d502      	bpl.n	8000ea0 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e9a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000e9e:	e756      	b.n	8000d4e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ea0:	053a      	lsls	r2, r7, #20
 8000ea2:	d502      	bpl.n	8000eaa <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ea4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ea8:	e751      	b.n	8000d4e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f7ff ff1e 	bl	8000cec <HAL_CAN_TxMailbox1AbortCallback>
 8000eb0:	e74d      	b.n	8000d4e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000eb2:	0379      	lsls	r1, r7, #13
 8000eb4:	d502      	bpl.n	8000ebc <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eb6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000eba:	e754      	b.n	8000d66 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ebc:	033a      	lsls	r2, r7, #12
 8000ebe:	d502      	bpl.n	8000ec6 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ec0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000ec4:	e74f      	b.n	8000d66 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f7ff ff11 	bl	8000cee <HAL_CAN_TxMailbox2AbortCallback>
 8000ecc:	e74b      	b.n	8000d66 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000ece:	2b50      	cmp	r3, #80	; 0x50
 8000ed0:	d010      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x1f6>
 8000ed2:	2b60      	cmp	r3, #96	; 0x60
 8000ed4:	d1c2      	bne.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ed6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000eda:	e7bf      	b.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000edc:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000ee0:	e7bc      	b.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ee2:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000ee6:	e7b9      	b.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ee8:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000eec:	e7b6      	b.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000eee:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000ef2:	e7b3      	b.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000ef4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000ef8:	e7b0      	b.n	8000e5c <HAL_CAN_IRQHandler+0x15e>
	...

08000efc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000efe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f18:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b530      	push	{r4, r5, lr}
 8000f24:	68dc      	ldr	r4, [r3, #12]
 8000f26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	2d04      	cmp	r5, #4
 8000f32:	bf28      	it	cs
 8000f34:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3c:	bf8c      	ite	hi
 8000f3e:	3c03      	subhi	r4, #3
 8000f40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f42:	fa03 f505 	lsl.w	r5, r3, r5
 8000f46:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4a:	40a3      	lsls	r3, r4
 8000f4c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000f52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	bfac      	ite	ge
 8000f5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	4a08      	ldrlt	r2, [pc, #32]	; (8000f80 <HAL_NVIC_SetPriority+0x60>)
 8000f60:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f64:	bfb8      	it	lt
 8000f66:	f000 000f 	andlt.w	r0, r0, #15
 8000f6a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	bfaa      	itet	ge
 8000f6e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f78:	bd30      	pop	{r4, r5, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	e000ed14 	.word	0xe000ed14

08000f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f84:	2800      	cmp	r0, #0
 8000f86:	db08      	blt.n	8000f9a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f88:	0942      	lsrs	r2, r0, #5
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f000 001f 	and.w	r0, r0, #31
 8000f90:	fa03 f000 	lsl.w	r0, r3, r0
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <HAL_NVIC_EnableIRQ+0x18>)
 8000f96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fa6:	d20a      	bcs.n	8000fbe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	21f0      	movs	r1, #240	; 0xf0
 8000fb0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000fcc:	6803      	ldr	r3, [r0, #0]
{
 8000fce:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000fd0:	4c08      	ldr	r4, [pc, #32]	; (8000ff4 <DMA_CalcBaseAndBitshift+0x28>)
{
 8000fd2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000fd4:	b2d9      	uxtb	r1, r3
 8000fd6:	3910      	subs	r1, #16
 8000fd8:	2018      	movs	r0, #24
 8000fda:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000fde:	5c20      	ldrb	r0, [r4, r0]
 8000fe0:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000fe2:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000fe6:	f020 0003 	bic.w	r0, r0, #3
 8000fea:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000fec:	bf88      	it	hi
 8000fee:	3004      	addhi	r0, #4
 8000ff0:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000ff2:	bd10      	pop	{r4, pc}
 8000ff4:	08001e14 	.word	0x08001e14

08000ff8 <HAL_DMA_Init>:
{
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff faaa 	bl	8000554 <HAL_GetTick>
 8001000:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001002:	2c00      	cmp	r4, #0
 8001004:	d073      	beq.n	80010ee <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8001006:	2300      	movs	r3, #0
 8001008:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800100c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800100e:	2302      	movs	r3, #2
 8001010:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101c:	6821      	ldr	r1, [r4, #0]
 800101e:	680b      	ldr	r3, [r1, #0]
 8001020:	07d8      	lsls	r0, r3, #31
 8001022:	d42f      	bmi.n	8001084 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001024:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001026:	4d33      	ldr	r5, [pc, #204]	; (80010f4 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001028:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800102a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800102c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	68e2      	ldr	r2, [r4, #12]
 8001034:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001036:	6922      	ldr	r2, [r4, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	6962      	ldr	r2, [r4, #20]
 800103c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103e:	69e2      	ldr	r2, [r4, #28]
 8001040:	4303      	orrs	r3, r0
 8001042:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001044:	6a22      	ldr	r2, [r4, #32]
 8001046:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001048:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800104a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800104c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001050:	bf02      	ittt	eq
 8001052:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001056:	4335      	orreq	r5, r6
 8001058:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800105a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800105c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800105e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001060:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001064:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001068:	d133      	bne.n	80010d2 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800106a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800106c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800106e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001070:	b37d      	cbz	r5, 80010d2 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001072:	b990      	cbnz	r0, 800109a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001074:	2a01      	cmp	r2, #1
 8001076:	d021      	beq.n	80010bc <HAL_DMA_Init+0xc4>
 8001078:	f032 0202 	bics.w	r2, r2, #2
 800107c:	d129      	bne.n	80010d2 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800107e:	01ea      	lsls	r2, r5, #7
 8001080:	d527      	bpl.n	80010d2 <HAL_DMA_Init+0xda>
 8001082:	e01e      	b.n	80010c2 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001084:	f7ff fa66 	bl	8000554 <HAL_GetTick>
 8001088:	1b40      	subs	r0, r0, r5
 800108a:	2805      	cmp	r0, #5
 800108c:	d9c6      	bls.n	800101c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800108e:	2320      	movs	r3, #32
 8001090:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001092:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001094:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001098:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800109a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800109e:	d114      	bne.n	80010ca <HAL_DMA_Init+0xd2>
    switch (tmp)
 80010a0:	2a03      	cmp	r2, #3
 80010a2:	d816      	bhi.n	80010d2 <HAL_DMA_Init+0xda>
 80010a4:	a001      	add	r0, pc, #4	; (adr r0, 80010ac <HAL_DMA_Init+0xb4>)
 80010a6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010c3 	.word	0x080010c3
 80010b0:	0800107f 	.word	0x0800107f
 80010b4:	080010c3 	.word	0x080010c3
 80010b8:	080010bd 	.word	0x080010bd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010bc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80010c0:	d107      	bne.n	80010d2 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010c2:	2340      	movs	r3, #64	; 0x40
 80010c4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80010c6:	2001      	movs	r0, #1
 80010c8:	e7e4      	b.n	8001094 <HAL_DMA_Init+0x9c>
    switch (tmp)
 80010ca:	2a02      	cmp	r2, #2
 80010cc:	d9f9      	bls.n	80010c2 <HAL_DMA_Init+0xca>
 80010ce:	2a03      	cmp	r2, #3
 80010d0:	d0d5      	beq.n	800107e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80010d2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff79 	bl	8000fcc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010dc:	233f      	movs	r3, #63	; 0x3f
 80010de:	4093      	lsls	r3, r2
 80010e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80010e4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80010e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80010ec:	e7d4      	b.n	8001098 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
 80010f0:	e7d2      	b.n	8001098 <HAL_DMA_Init+0xa0>
 80010f2:	bf00      	nop
 80010f4:	f010803f 	.word	0xf010803f

080010f8 <HAL_DMA_Start_IT>:
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80010fa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fe:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001100:	2c01      	cmp	r4, #1
 8001102:	d031      	beq.n	8001168 <HAL_DMA_Start_IT+0x70>
 8001104:	2401      	movs	r4, #1
 8001106:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800110a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800110e:	2c01      	cmp	r4, #1
 8001110:	f04f 0500 	mov.w	r5, #0
 8001114:	f04f 0402 	mov.w	r4, #2
 8001118:	d124      	bne.n	8001164 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800111a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800111e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001120:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001122:	6825      	ldr	r5, [r4, #0]
 8001124:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001128:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800112a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800112c:	6883      	ldr	r3, [r0, #8]
 800112e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001130:	bf0e      	itee	eq
 8001132:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001134:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001136:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001138:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800113a:	bf08      	it	eq
 800113c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800113e:	233f      	movs	r3, #63	; 0x3f
 8001140:	4093      	lsls	r3, r2
 8001142:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	f043 0316 	orr.w	r3, r3, #22
 800114a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800114c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800114e:	b11b      	cbz	r3, 8001158 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001160:	2000      	movs	r0, #0
}
 8001162:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001164:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001168:	2002      	movs	r0, #2
 800116a:	e7fa      	b.n	8001162 <HAL_DMA_Start_IT+0x6a>

0800116c <HAL_DMA_IRQHandler>:
{
 800116c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001174:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001176:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001178:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800117a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800117c:	2208      	movs	r2, #8
 800117e:	409a      	lsls	r2, r3
 8001180:	4232      	tst	r2, r6
{
 8001182:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001184:	d00c      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001186:	6801      	ldr	r1, [r0, #0]
 8001188:	6808      	ldr	r0, [r1, #0]
 800118a:	0740      	lsls	r0, r0, #29
 800118c:	d508      	bpl.n	80011a0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800118e:	6808      	ldr	r0, [r1, #0]
 8001190:	f020 0004 	bic.w	r0, r0, #4
 8001194:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001196:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001198:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a0:	2201      	movs	r2, #1
 80011a2:	409a      	lsls	r2, r3
 80011a4:	4232      	tst	r2, r6
 80011a6:	d008      	beq.n	80011ba <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011a8:	6821      	ldr	r1, [r4, #0]
 80011aa:	6949      	ldr	r1, [r1, #20]
 80011ac:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011ae:	bf41      	itttt	mi
 80011b0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011b2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80011b4:	f042 0202 	orrmi.w	r2, r2, #2
 80011b8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ba:	2204      	movs	r2, #4
 80011bc:	409a      	lsls	r2, r3
 80011be:	4232      	tst	r2, r6
 80011c0:	d008      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011c2:	6821      	ldr	r1, [r4, #0]
 80011c4:	6809      	ldr	r1, [r1, #0]
 80011c6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011c8:	bf41      	itttt	mi
 80011ca:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011cc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80011ce:	f042 0204 	orrmi.w	r2, r2, #4
 80011d2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011d4:	2210      	movs	r2, #16
 80011d6:	409a      	lsls	r2, r3
 80011d8:	4232      	tst	r2, r6
 80011da:	d010      	beq.n	80011fe <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	0709      	lsls	r1, r1, #28
 80011e2:	d50c      	bpl.n	80011fe <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011e4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	0350      	lsls	r0, r2, #13
 80011ea:	d537      	bpl.n	800125c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	0319      	lsls	r1, r3, #12
 80011f0:	d401      	bmi.n	80011f6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80011f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011f4:	e000      	b.n	80011f8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80011f8:	b10b      	cbz	r3, 80011fe <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80011fa:	4620      	mov	r0, r4
 80011fc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001200:	2220      	movs	r2, #32
 8001202:	408a      	lsls	r2, r1
 8001204:	4232      	tst	r2, r6
 8001206:	d03a      	beq.n	800127e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	06c6      	lsls	r6, r0, #27
 800120e:	d536      	bpl.n	800127e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001210:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001212:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001216:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001218:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800121a:	d127      	bne.n	800126c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800121c:	f022 0216 	bic.w	r2, r2, #22
 8001220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001228:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800122a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800122c:	b90a      	cbnz	r2, 8001232 <HAL_DMA_IRQHandler+0xc6>
 800122e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001230:	b11a      	cbz	r2, 800123a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	f022 0208 	bic.w	r2, r2, #8
 8001238:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123a:	233f      	movs	r3, #63	; 0x3f
 800123c:	408b      	lsls	r3, r1
 800123e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001240:	2300      	movs	r3, #0
 8001242:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001246:	2301      	movs	r3, #1
 8001248:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800124c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800124e:	2b00      	cmp	r3, #0
 8001250:	d045      	beq.n	80012de <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001252:	4620      	mov	r0, r4
}
 8001254:	b003      	add	sp, #12
 8001256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800125a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001260:	bf5e      	ittt	pl
 8001262:	681a      	ldrpl	r2, [r3, #0]
 8001264:	f022 0208 	bicpl.w	r2, r2, #8
 8001268:	601a      	strpl	r2, [r3, #0]
 800126a:	e7c2      	b.n	80011f2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800126c:	0350      	lsls	r0, r2, #13
 800126e:	d527      	bpl.n	80012c0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0319      	lsls	r1, r3, #12
 8001274:	d431      	bmi.n	80012da <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001276:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001278:	b10b      	cbz	r3, 800127e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800127a:	4620      	mov	r0, r4
 800127c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800127e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001280:	b36b      	cbz	r3, 80012de <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001282:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001284:	07da      	lsls	r2, r3, #31
 8001286:	d519      	bpl.n	80012bc <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8001288:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800128a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800128e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8001292:	2305      	movs	r3, #5
 8001294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80012a0:	9b01      	ldr	r3, [sp, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	42bb      	cmp	r3, r7
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	d802      	bhi.n	80012b0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012aa:	6813      	ldr	r3, [r2, #0]
 80012ac:	07db      	lsls	r3, r3, #31
 80012ae:	d4f7      	bmi.n	80012a0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80012b0:	2300      	movs	r3, #0
 80012b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80012bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012be:	e7c6      	b.n	800124e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80012c6:	d108      	bne.n	80012da <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	f021 0110 	bic.w	r1, r1, #16
 80012ce:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80012d0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80012d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80012d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80012da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012dc:	e7cc      	b.n	8001278 <HAL_DMA_IRQHandler+0x10c>
}
 80012de:	b003      	add	sp, #12
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001498 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f0:	4a67      	ldr	r2, [pc, #412]	; (8001490 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80012f6:	2401      	movs	r4, #1
 80012f8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80012fe:	43ac      	bics	r4, r5
 8001300:	f040 80b0 	bne.w	8001464 <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001304:	684d      	ldr	r5, [r1, #4]
 8001306:	f005 0403 	and.w	r4, r5, #3
 800130a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800130e:	2603      	movs	r6, #3
 8001310:	1e67      	subs	r7, r4, #1
 8001312:	fa06 f608 	lsl.w	r6, r6, r8
 8001316:	2f01      	cmp	r7, #1
 8001318:	ea6f 0606 	mvn.w	r6, r6
 800131c:	d834      	bhi.n	8001388 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800131e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001324:	68cf      	ldr	r7, [r1, #12]
 8001326:	fa07 f708 	lsl.w	r7, r7, r8
 800132a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800132e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001330:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001332:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001336:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800133a:	409f      	lsls	r7, r3
 800133c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001340:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001342:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001344:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	688f      	ldr	r7, [r1, #8]
 800134a:	fa07 f708 	lsl.w	r7, r7, r8
 800134e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001354:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001356:	d119      	bne.n	800138c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001358:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800135c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001360:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001364:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001368:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800136c:	f04f 0e0f 	mov.w	lr, #15
 8001370:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001374:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	690f      	ldr	r7, [r1, #16]
 800137a:	fa07 f70b 	lsl.w	r7, r7, fp
 800137e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	f8ca 7020 	str.w	r7, [sl, #32]
 8001386:	e001      	b.n	800138c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	2c03      	cmp	r4, #3
 800138a:	d1da      	bne.n	8001342 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800138c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001396:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8001398:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139a:	d563      	bpl.n	8001464 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	f04f 0a00 	mov.w	sl, #0
 80013a0:	f8cd a004 	str.w	sl, [sp, #4]
 80013a4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a8:	4c3a      	ldr	r4, [pc, #232]	; (8001494 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80013ae:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80013b2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80013b6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80013ba:	9601      	str	r6, [sp, #4]
 80013bc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80013be:	f023 0603 	bic.w	r6, r3, #3
 80013c2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80013c6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ca:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80013ce:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013d6:	270f      	movs	r7, #15
 80013d8:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013dc:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013de:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e2:	d046      	beq.n	8001472 <HAL_GPIO_Init+0x18a>
 80013e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013e8:	42a0      	cmp	r0, r4
 80013ea:	d044      	beq.n	8001476 <HAL_GPIO_Init+0x18e>
 80013ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013f0:	42a0      	cmp	r0, r4
 80013f2:	d042      	beq.n	800147a <HAL_GPIO_Init+0x192>
 80013f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013f8:	42a0      	cmp	r0, r4
 80013fa:	d040      	beq.n	800147e <HAL_GPIO_Init+0x196>
 80013fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001400:	42a0      	cmp	r0, r4
 8001402:	d03e      	beq.n	8001482 <HAL_GPIO_Init+0x19a>
 8001404:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001408:	42a0      	cmp	r0, r4
 800140a:	d03c      	beq.n	8001486 <HAL_GPIO_Init+0x19e>
 800140c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001410:	42a0      	cmp	r0, r4
 8001412:	d03a      	beq.n	800148a <HAL_GPIO_Init+0x1a2>
 8001414:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001418:	42a0      	cmp	r0, r4
 800141a:	bf0c      	ite	eq
 800141c:	2407      	moveq	r4, #7
 800141e:	2408      	movne	r4, #8
 8001420:	fa04 f40e 	lsl.w	r4, r4, lr
 8001424:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001426:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001428:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800142a:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001430:	bf54      	ite	pl
 8001432:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001434:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001438:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 800143a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800143e:	bf54      	ite	pl
 8001440:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001442:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001446:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001448:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800144c:	bf54      	ite	pl
 800144e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001450:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001454:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001456:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800145a:	bf54      	ite	pl
 800145c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800145e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001462:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001464:	3301      	adds	r3, #1
 8001466:	2b10      	cmp	r3, #16
 8001468:	f47f af44 	bne.w	80012f4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800146c:	b003      	add	sp, #12
 800146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	4654      	mov	r4, sl
 8001474:	e7d4      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001476:	2401      	movs	r4, #1
 8001478:	e7d2      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800147a:	2402      	movs	r4, #2
 800147c:	e7d0      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800147e:	2403      	movs	r4, #3
 8001480:	e7ce      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001482:	2404      	movs	r4, #4
 8001484:	e7cc      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001486:	2405      	movs	r4, #5
 8001488:	e7ca      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800148a:	2406      	movs	r4, #6
 800148c:	e7c8      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800148e:	bf00      	nop
 8001490:	40013c00 	.word	0x40013c00
 8001494:	40020000 	.word	0x40020000
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a0:	4604      	mov	r4, r0
 80014a2:	b340      	cbz	r0, 80014f6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	07dd      	lsls	r5, r3, #31
 80014a8:	d410      	bmi.n	80014cc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	0798      	lsls	r0, r3, #30
 80014ae:	d45e      	bmi.n	800156e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	071a      	lsls	r2, r3, #28
 80014b4:	f100 80a0 	bmi.w	80015f8 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	075b      	lsls	r3, r3, #29
 80014bc:	f100 80be 	bmi.w	800163c <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c0:	69a0      	ldr	r0, [r4, #24]
 80014c2:	2800      	cmp	r0, #0
 80014c4:	f040 811f 	bne.w	8001706 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80014c8:	2000      	movs	r0, #0
 80014ca:	e02b      	b.n	8001524 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014cc:	4ba6      	ldr	r3, [pc, #664]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	f002 020c 	and.w	r2, r2, #12
 80014d4:	2a04      	cmp	r2, #4
 80014d6:	d007      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014de:	2a08      	cmp	r2, #8
 80014e0:	d10b      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	0251      	lsls	r1, r2, #9
 80014e6:	d508      	bpl.n	80014fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b9f      	ldr	r3, [pc, #636]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	039a      	lsls	r2, r3, #14
 80014ee:	d5dc      	bpl.n	80014aa <HAL_RCC_OscConfig+0xe>
 80014f0:	6863      	ldr	r3, [r4, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1d9      	bne.n	80014aa <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001500:	d113      	bne.n	800152a <HAL_RCC_OscConfig+0x8e>
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001508:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800150a:	f7ff f823 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4e96      	ldr	r6, [pc, #600]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001510:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	6833      	ldr	r3, [r6, #0]
 8001514:	039b      	lsls	r3, r3, #14
 8001516:	d4c8      	bmi.n	80014aa <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff f81c 	bl	8000554 <HAL_GetTick>
 800151c:	1b40      	subs	r0, r0, r5
 800151e:	2864      	cmp	r0, #100	; 0x64
 8001520:	d9f7      	bls.n	8001512 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001522:	2003      	movs	r0, #3
}
 8001524:	b002      	add	sp, #8
 8001526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152a:	4d8f      	ldr	r5, [pc, #572]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 800152c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0xa8>
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	602b      	str	r3, [r5, #0]
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001542:	e7e2      	b.n	800150a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001548:	602b      	str	r3, [r5, #0]
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001552:	2a00      	cmp	r2, #0
 8001554:	d1d9      	bne.n	800150a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001556:	f7fe fffd 	bl	8000554 <HAL_GetTick>
 800155a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	039f      	lsls	r7, r3, #14
 8001560:	d5a3      	bpl.n	80014aa <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7fe fff7 	bl	8000554 <HAL_GetTick>
 8001566:	1b80      	subs	r0, r0, r6
 8001568:	2864      	cmp	r0, #100	; 0x64
 800156a:	d9f7      	bls.n	800155c <HAL_RCC_OscConfig+0xc0>
 800156c:	e7d9      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156e:	4b7e      	ldr	r3, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	f012 0f0c 	tst.w	r2, #12
 8001576:	d007      	beq.n	8001588 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	2a08      	cmp	r2, #8
 8001580:	d111      	bne.n	80015a6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	025e      	lsls	r6, r3, #9
 8001586:	d40e      	bmi.n	80015a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001588:	4b77      	ldr	r3, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	0795      	lsls	r5, r2, #30
 800158e:	d502      	bpl.n	8001596 <HAL_RCC_OscConfig+0xfa>
 8001590:	68e2      	ldr	r2, [r4, #12]
 8001592:	2a01      	cmp	r2, #1
 8001594:	d1af      	bne.n	80014f6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	6921      	ldr	r1, [r4, #16]
 800159a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800159e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80015a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a4:	e784      	b.n	80014b0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a6:	68e2      	ldr	r2, [r4, #12]
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x2d0>)
 80015aa:	b1b2      	cbz	r2, 80015da <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015b0:	f7fe ffd0 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4d6c      	ldr	r5, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80015b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	0798      	lsls	r0, r3, #30
 80015bc:	d507      	bpl.n	80015ce <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	6922      	ldr	r2, [r4, #16]
 80015c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ca:	602b      	str	r3, [r5, #0]
 80015cc:	e770      	b.n	80014b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7fe ffc1 	bl	8000554 <HAL_GetTick>
 80015d2:	1b80      	subs	r0, r0, r6
 80015d4:	2802      	cmp	r0, #2
 80015d6:	d9ef      	bls.n	80015b8 <HAL_RCC_OscConfig+0x11c>
 80015d8:	e7a3      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80015da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015dc:	f7fe ffba 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e0:	4e61      	ldr	r6, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80015e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e4:	6833      	ldr	r3, [r6, #0]
 80015e6:	0799      	lsls	r1, r3, #30
 80015e8:	f57f af62 	bpl.w	80014b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7fe ffb2 	bl	8000554 <HAL_GetTick>
 80015f0:	1b40      	subs	r0, r0, r5
 80015f2:	2802      	cmp	r0, #2
 80015f4:	d9f6      	bls.n	80015e4 <HAL_RCC_OscConfig+0x148>
 80015f6:	e794      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f8:	6962      	ldr	r2, [r4, #20]
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <HAL_RCC_OscConfig+0x2d4>)
 80015fc:	b17a      	cbz	r2, 800161e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001602:	f7fe ffa7 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4e58      	ldr	r6, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001608:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800160c:	079f      	lsls	r7, r3, #30
 800160e:	f53f af53 	bmi.w	80014b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001612:	f7fe ff9f 	bl	8000554 <HAL_GetTick>
 8001616:	1b40      	subs	r0, r0, r5
 8001618:	2802      	cmp	r0, #2
 800161a:	d9f6      	bls.n	800160a <HAL_RCC_OscConfig+0x16e>
 800161c:	e781      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800161e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001620:	f7fe ff98 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4e50      	ldr	r6, [pc, #320]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001626:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800162a:	0798      	lsls	r0, r3, #30
 800162c:	f57f af44 	bpl.w	80014b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7fe ff90 	bl	8000554 <HAL_GetTick>
 8001634:	1b40      	subs	r0, r0, r5
 8001636:	2802      	cmp	r0, #2
 8001638:	d9f6      	bls.n	8001628 <HAL_RCC_OscConfig+0x18c>
 800163a:	e772      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163c:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 800163e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001640:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001644:	d128      	bne.n	8001698 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	9201      	str	r2, [sp, #4]
 8001648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800165a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4d45      	ldr	r5, [pc, #276]	; (8001774 <HAL_RCC_OscConfig+0x2d8>)
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	05d9      	lsls	r1, r3, #23
 8001662:	d51b      	bpl.n	800169c <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	68a3      	ldr	r3, [r4, #8]
 8001666:	4d40      	ldr	r5, [pc, #256]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 8001668:	2b01      	cmp	r3, #1
 800166a:	d127      	bne.n	80016bc <HAL_RCC_OscConfig+0x220>
 800166c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001674:	f7fe ff6e 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4e3b      	ldr	r6, [pc, #236]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800167a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001682:	079b      	lsls	r3, r3, #30
 8001684:	d539      	bpl.n	80016fa <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8001686:	2f00      	cmp	r7, #0
 8001688:	f43f af1a 	beq.w	80014c0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4a36      	ldr	r2, [pc, #216]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 800168e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	e713      	b.n	80014c0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2700      	movs	r7, #0
 800169a:	e7df      	b.n	800165c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016a4:	f7fe ff56 	bl	8000554 <HAL_GetTick>
 80016a8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	05da      	lsls	r2, r3, #23
 80016ae:	d4d9      	bmi.n	8001664 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7fe ff50 	bl	8000554 <HAL_GetTick>
 80016b4:	1b80      	subs	r0, r0, r6
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d9f7      	bls.n	80016aa <HAL_RCC_OscConfig+0x20e>
 80016ba:	e732      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d104      	bne.n	80016ca <HAL_RCC_OscConfig+0x22e>
 80016c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	672b      	str	r3, [r5, #112]	; 0x70
 80016c8:	e7d0      	b.n	800166c <HAL_RCC_OscConfig+0x1d0>
 80016ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	672a      	str	r2, [r5, #112]	; 0x70
 80016d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ca      	bne.n	8001674 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 80016de:	f7fe ff39 	bl	8000554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016ea:	0798      	lsls	r0, r3, #30
 80016ec:	d5cb      	bpl.n	8001686 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7fe ff31 	bl	8000554 <HAL_GetTick>
 80016f2:	1b80      	subs	r0, r0, r6
 80016f4:	4540      	cmp	r0, r8
 80016f6:	d9f7      	bls.n	80016e8 <HAL_RCC_OscConfig+0x24c>
 80016f8:	e713      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7fe ff2b 	bl	8000554 <HAL_GetTick>
 80016fe:	1b40      	subs	r0, r0, r5
 8001700:	4540      	cmp	r0, r8
 8001702:	d9bd      	bls.n	8001680 <HAL_RCC_OscConfig+0x1e4>
 8001704:	e70d      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001706:	4d18      	ldr	r5, [pc, #96]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
 8001708:	68ab      	ldr	r3, [r5, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d047      	beq.n	80017a2 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	4e19      	ldr	r6, [pc, #100]	; (8001778 <HAL_RCC_OscConfig+0x2dc>)
 8001714:	2300      	movs	r3, #0
 8001716:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001718:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171a:	d135      	bne.n	8001788 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 800171c:	f7fe ff1a 	bl	8000554 <HAL_GetTick>
 8001720:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	0199      	lsls	r1, r3, #6
 8001726:	d429      	bmi.n	800177c <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001728:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800172c:	4313      	orrs	r3, r2
 800172e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001730:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001734:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001736:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800173a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800173c:	0852      	lsrs	r2, r2, #1
 800173e:	3a01      	subs	r2, #1
 8001740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001744:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001746:	2301      	movs	r3, #1
 8001748:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800174a:	f7fe ff03 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4d06      	ldr	r5, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001750:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	019a      	lsls	r2, r3, #6
 8001756:	f53f aeb7 	bmi.w	80014c8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175a:	f7fe fefb 	bl	8000554 <HAL_GetTick>
 800175e:	1b00      	subs	r0, r0, r4
 8001760:	2802      	cmp	r0, #2
 8001762:	d9f6      	bls.n	8001752 <HAL_RCC_OscConfig+0x2b6>
 8001764:	e6dd      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	42470000 	.word	0x42470000
 8001770:	42470e80 	.word	0x42470e80
 8001774:	40007000 	.word	0x40007000
 8001778:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7fe feea 	bl	8000554 <HAL_GetTick>
 8001780:	1bc0      	subs	r0, r0, r7
 8001782:	2802      	cmp	r0, #2
 8001784:	d9cd      	bls.n	8001722 <HAL_RCC_OscConfig+0x286>
 8001786:	e6cc      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001788:	f7fe fee4 	bl	8000554 <HAL_GetTick>
 800178c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	f57f ae99 	bpl.w	80014c8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7fe fedd 	bl	8000554 <HAL_GetTick>
 800179a:	1b00      	subs	r0, r0, r4
 800179c:	2802      	cmp	r0, #2
 800179e:	d9f6      	bls.n	800178e <HAL_RCC_OscConfig+0x2f2>
 80017a0:	e6bf      	b.n	8001522 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a2:	2801      	cmp	r0, #1
 80017a4:	f43f aebe 	beq.w	8001524 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80017a8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017aa:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b0:	4291      	cmp	r1, r2
 80017b2:	f47f aea0 	bne.w	80014f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017bc:	428a      	cmp	r2, r1
 80017be:	f47f ae9a 	bne.w	80014f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80017c8:	401a      	ands	r2, r3
 80017ca:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80017ce:	f47f ae92 	bne.w	80014f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017d4:	0852      	lsrs	r2, r2, #1
 80017d6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80017da:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017dc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80017e0:	f47f ae89 	bne.w	80014f6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017e6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ea:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80017ee:	f43f ae6b 	beq.w	80014c8 <HAL_RCC_OscConfig+0x2c>
 80017f2:	e680      	b.n	80014f6 <HAL_RCC_OscConfig+0x5a>

080017f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	688b      	ldr	r3, [r1, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d01c      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x48>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001806:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001808:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001810:	bf14      	ite	ne
 8001812:	480d      	ldrne	r0, [pc, #52]	; (8001848 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	480d      	ldreq	r0, [pc, #52]	; (800184c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800181a:	bf18      	it	ne
 800181c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	fba1 0100 	umull	r0, r1, r1, r0
 8001826:	f7fe fccf 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_GetSysClockFreq+0x50>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001832:	3301      	adds	r3, #1
 8001834:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001836:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800183a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <HAL_RCC_GetSysClockFreq+0x54>)
 800183e:	e7fc      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001842:	e7fa      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x46>
 8001844:	40023800 	.word	0x40023800
 8001848:	007a1200 	.word	0x007a1200
 800184c:	00f42400 	.word	0x00f42400

08001850 <HAL_RCC_ClockConfig>:
{
 8001850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001854:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001856:	4604      	mov	r4, r0
 8001858:	b910      	cbnz	r0, 8001860 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
}
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_ClockConfig+0x124>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f002 0207 	and.w	r2, r2, #7
 8001868:	428a      	cmp	r2, r1
 800186a:	d328      	bcc.n	80018be <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	0797      	lsls	r7, r2, #30
 8001870:	d42d      	bmi.n	80018ce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	07d0      	lsls	r0, r2, #31
 8001874:	d441      	bmi.n	80018fa <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x124>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f002 0207 	and.w	r2, r2, #7
 800187e:	42aa      	cmp	r2, r5
 8001880:	d866      	bhi.n	8001950 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	6822      	ldr	r2, [r4, #0]
 8001884:	0751      	lsls	r1, r2, #29
 8001886:	d46c      	bmi.n	8001962 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	0713      	lsls	r3, r2, #28
 800188a:	d507      	bpl.n	800189c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188c:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	6893      	ldr	r3, [r2, #8]
 8001892:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001896:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800189a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189c:	f7ff ffaa 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 80018a2:	4a36      	ldr	r2, [pc, #216]	; (800197c <HAL_RCC_ClockConfig+0x12c>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	40d8      	lsrs	r0, r3
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <HAL_RCC_ClockConfig+0x130>)
 80018b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_ClockConfig+0x134>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f7fe fe03 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 80018ba:	2000      	movs	r0, #0
 80018bc:	e7ce      	b.n	800185c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d1c6      	bne.n	800185a <HAL_RCC_ClockConfig+0xa>
 80018cc:	e7ce      	b.n	800186c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 80018d0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d4:	bf1e      	ittt	ne
 80018d6:	6899      	ldrne	r1, [r3, #8]
 80018d8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80018dc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	bf42      	ittt	mi
 80018e2:	6899      	ldrmi	r1, [r3, #8]
 80018e4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80018e8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ea:	4923      	ldr	r1, [pc, #140]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 80018ec:	68a0      	ldr	r0, [r4, #8]
 80018ee:	688b      	ldr	r3, [r1, #8]
 80018f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f4:	4303      	orrs	r3, r0
 80018f6:	608b      	str	r3, [r1, #8]
 80018f8:	e7bb      	b.n	8001872 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	6862      	ldr	r2, [r4, #4]
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 80018fe:	2a01      	cmp	r2, #1
 8001900:	d11c      	bne.n	800193c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	d0a7      	beq.n	800185a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4e1b      	ldr	r6, [pc, #108]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 800190c:	68b3      	ldr	r3, [r6, #8]
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	4313      	orrs	r3, r2
 8001914:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001916:	f7fe fe1d 	bl	8000554 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800191e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001920:	68b3      	ldr	r3, [r6, #8]
 8001922:	6862      	ldr	r2, [r4, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800192c:	d0a3      	beq.n	8001876 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192e:	f7fe fe11 	bl	8000554 <HAL_GetTick>
 8001932:	1bc0      	subs	r0, r0, r7
 8001934:	4540      	cmp	r0, r8
 8001936:	d9f3      	bls.n	8001920 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001938:	2003      	movs	r0, #3
 800193a:	e78f      	b.n	800185c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193c:	1e91      	subs	r1, r2, #2
 800193e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	d802      	bhi.n	800194a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001944:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001948:	e7de      	b.n	8001908 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	f013 0f02 	tst.w	r3, #2
 800194e:	e7db      	b.n	8001908 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001950:	b2ea      	uxtb	r2, r5
 8001952:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	42ab      	cmp	r3, r5
 800195c:	f47f af7d 	bne.w	800185a <HAL_RCC_ClockConfig+0xa>
 8001960:	e78f      	b.n	8001882 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4905      	ldr	r1, [pc, #20]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 8001964:	68e0      	ldr	r0, [r4, #12]
 8001966:	688b      	ldr	r3, [r1, #8]
 8001968:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800196c:	4303      	orrs	r3, r0
 800196e:	608b      	str	r3, [r1, #8]
 8001970:	e78a      	b.n	8001888 <HAL_RCC_ClockConfig+0x38>
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08001e1c 	.word	0x08001e1c
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b530      	push	{r4, r5, lr}
 800198a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198c:	2210      	movs	r2, #16
 800198e:	2100      	movs	r1, #0
 8001990:	a80a      	add	r0, sp, #40	; 0x28
 8001992:	f000 fa2b 	bl	8001dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001996:	2100      	movs	r1, #0
 8001998:	2214      	movs	r2, #20
 800199a:	a803      	add	r0, sp, #12
 800199c:	f000 fa26 	bl	8001dec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2400      	movs	r4, #0
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <SystemClock_Config+0x8c>)
 80019a4:	9401      	str	r4, [sp, #4]
 80019a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <SystemClock_Config+0x90>)
 80019ba:	9402      	str	r4, [sp, #8]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d8:	2502      	movs	r5, #2
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019de:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e0:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019e6:	2304      	movs	r3, #4
 80019e8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019ec:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f7ff fd54 	bl	800149c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fa:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	e9cd 1306 	strd	r1, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a06:	a803      	add	r0, sp, #12
 8001a08:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a0c:	f7ff ff20 	bl	8001850 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001a10:	b015      	add	sp, #84	; 0x54
 8001a12:	bd30      	pop	{r4, r5, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <main>:
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a20:	2400      	movs	r4, #0
  HAL_Init();
 8001a22:	f7fe fd71 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 8001a26:	f7ff ffaf 	bl	8001988 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <main+0x138>)
 8001a2c:	9401      	str	r4, [sp, #4]
 8001a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcan1.Instance = CAN1;
 8001a30:	4e49      	ldr	r6, [pc, #292]	; (8001b58 <main+0x13c>)
  hadc1.Instance = ADC1;
 8001a32:	4d4a      	ldr	r5, [pc, #296]	; (8001b5c <main+0x140>)
  pTxHeader.DLC = 1;      // Specifies the length of the frame that will be transmitted. (Biz 1 bytlık veri gönderiyoruz)
 8001a34:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8001b78 <main+0x15c>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a40:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a44:	9201      	str	r2, [sp, #4]
 8001a46:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	9402      	str	r4, [sp, #8]
 8001a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	f002 0201 	and.w	r2, r2, #1
 8001a58:	9202      	str	r2, [sp, #8]
 8001a5a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	9403      	str	r4, [sp, #12]
 8001a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a60:	f042 0202 	orr.w	r2, r2, #2
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a68:	f002 0202 	and.w	r2, r2, #2
 8001a6c:	9203      	str	r2, [sp, #12]
 8001a6e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a70:	9400      	str	r4, [sp, #0]
 8001a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a80:	4622      	mov	r2, r4
 8001a82:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a84:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a86:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a88:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a8a:	f7ff fa49 	bl	8000f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a8e:	2038      	movs	r0, #56	; 0x38
 8001a90:	f7ff fa78 	bl	8000f84 <HAL_NVIC_EnableIRQ>
  hcan1.Init.Prescaler = 21;
 8001a94:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <main+0x144>)
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a96:	61b4      	str	r4, [r6, #24]
  hcan1.Init.Prescaler = 21;
 8001a98:	2315      	movs	r3, #21
 8001a9a:	e9c6 2300 	strd	r2, r3, [r6]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001a9e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8001aa2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001aa6:	4630      	mov	r0, r6
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001aa8:	e9c6 1304 	strd	r1, r3, [r6, #16]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aac:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ab0:	83b4      	strh	r4, [r6, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ab2:	f7fe ff95 	bl	80009e0 <HAL_CAN_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	eb0d 0002 	add.w	r0, sp, r2
 8001abc:	4621      	mov	r1, r4
 8001abe:	f000 f995 	bl	8001dec <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <main+0x148>)
  hadc1.Init.ScanConvMode = DISABLE;
 8001ac4:	612c      	str	r4, [r5, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aca:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ad2:	2701      	movs	r7, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001ad4:	60ab      	str	r3, [r5, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad6:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <main+0x14c>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ada:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ade:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae0:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ae4:	762f      	strb	r7, [r5, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001ae6:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ae8:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aec:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aee:	f7fe fd4b 	bl	8000588 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001af2:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	a904      	add	r1, sp, #16
 8001af6:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8001af8:	e9cd 4704 	strd	r4, r7, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001afc:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afe:	f7fe fedd 	bl	80008bc <HAL_ADC_ConfigChannel>
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001b02:	491a      	ldr	r1, [pc, #104]	; (8001b6c <main+0x150>)
  pTxHeader.DLC = 1;      // Specifies the length of the frame that will be transmitted. (Biz 1 bytlık veri gönderiyoruz)
 8001b04:	f8c8 7010 	str.w	r7, [r8, #16]
  pTxHeader.StdId = 0x0112;             /*!< Specifies the standard identifier. This parameter must be a number
 8001b08:	f44f 7389 	mov.w	r3, #274	; 0x112
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001b0c:	4630      	mov	r0, r6
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b0e:	e9c1 4404 	strd	r4, r4, [r1, #16]
  sFilterConfig.FilterIdLow      = 0x0000;
 8001b12:	e9c1 4400 	strd	r4, r4, [r1]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 8001b16:	e9c1 4402 	strd	r4, r4, [r1, #8]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b1a:	e9c1 4406 	strd	r4, r4, [r1, #24]
  pTxHeader.StdId = 0x0112;             /*!< Specifies the standard identifier. This parameter must be a number
 8001b1e:	f8c8 3000 	str.w	r3, [r8]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001b22:	620f      	str	r7, [r1, #32]
  pTxHeader.RTR = CAN_RTR_DATA;     /*!< Specifies the type of frame for the message that will be transmitted.
 8001b24:	e9c8 4402 	strd	r4, r4, [r8, #8]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001b28:	f7fe ffd6 	bl	8000ad8 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f7ff f85b 	bl	8000be8 <HAL_CAN_Start>
  HAL_ADC_Start_DMA(&hadc1, &adc_value, 1); // 8bitlik deger verdik warning verebilir.
 8001b32:	4628      	mov	r0, r5
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <main+0x154>)
	 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &adc_value, &pTxMailbox);
 8001b36:	4d0f      	ldr	r5, [pc, #60]	; (8001b74 <main+0x158>)
 8001b38:	4c0d      	ldr	r4, [pc, #52]	; (8001b70 <main+0x154>)
  HAL_ADC_Start_DMA(&hadc1, &adc_value, 1); // 8bitlik deger verdik warning verebilir.
 8001b3a:	463a      	mov	r2, r7
 8001b3c:	f7fe fdca 	bl	80006d4 <HAL_ADC_Start_DMA>
	 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &adc_value, &pTxMailbox);
 8001b40:	462b      	mov	r3, r5
 8001b42:	4622      	mov	r2, r4
 8001b44:	4641      	mov	r1, r8
 8001b46:	4804      	ldr	r0, [pc, #16]	; (8001b58 <main+0x13c>)
 8001b48:	f7ff f87c 	bl	8000c44 <HAL_CAN_AddTxMessage>
     HAL_Delay(50);
 8001b4c:	2032      	movs	r0, #50	; 0x32
 8001b4e:	f7fe fd07 	bl	8000560 <HAL_Delay>
  while (1)
 8001b52:	e7f5      	b.n	8001b40 <main+0x124>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	2000011c 	.word	0x2000011c
 8001b5c:	20000074 	.word	0x20000074
 8001b60:	40006400 	.word	0x40006400
 8001b64:	40012000 	.word	0x40012000
 8001b68:	0f000001 	.word	0x0f000001
 8001b6c:	2000002c 	.word	0x2000002c
 8001b70:	20000070 	.word	0x20000070
 8001b74:	20000054 	.word	0x20000054
 8001b78:	20000058 	.word	0x20000058

08001b7c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_MspInit+0x38>)
 8001b84:	2100      	movs	r1, #0
 8001b86:	9100      	str	r1, [sp, #0]
 8001b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b96:	9200      	str	r2, [sp, #0]
 8001b98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	9101      	str	r1, [sp, #4]
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bae:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bb2:	f7ff b9a3 	b.w	8000efc <HAL_NVIC_SetPriorityGrouping>
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	4606      	mov	r6, r0
 8001bc0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	2214      	movs	r2, #20
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	a803      	add	r0, sp, #12
 8001bc8:	f000 f910 	bl	8001dec <memset>
  if(hadc->Instance==ADC1)
 8001bcc:	6832      	ldr	r2, [r6, #0]
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_ADC_MspInit+0x8c>)
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d137      	bne.n	8001c44 <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd4:	2500      	movs	r5, #0
 8001bd6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001bda:	9501      	str	r5, [sp, #4]
 8001bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	481b      	ldr	r0, [pc, #108]	; (8001c4c <HAL_ADC_MspInit+0x90>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001be0:	4c1b      	ldr	r4, [pc, #108]	; (8001c50 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
 8001be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001bee:	9201      	str	r2, [sp, #4]
 8001bf0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	9502      	str	r5, [sp, #8]
 8001bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f7ff fb69 	bl	80012e8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c18:	61a5      	str	r5, [r4, #24]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c1a:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c22:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c26:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c28:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c30:	e9c4 3507 	strd	r3, r5, [r4, #28]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c34:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c36:	f7ff f9df 	bl	8000ff8 <HAL_DMA_Init>
 8001c3a:	b108      	cbz	r0, 8001c40 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8001c3c:	f7ff ff9e 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c40:	63b4      	str	r4, [r6, #56]	; 0x38
 8001c42:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c44:	b008      	add	sp, #32
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	200000bc 	.word	0x200000bc
 8001c54:	40026410 	.word	0x40026410

08001c58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	2214      	movs	r2, #20
 8001c60:	2100      	movs	r1, #0
 8001c62:	a803      	add	r0, sp, #12
 8001c64:	f000 f8c2 	bl	8001dec <memset>
  if(hcan->Instance==CAN1)
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_CAN_MspInit+0x78>)
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d12c      	bne.n	8001cca <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001c74:	2400      	movs	r4, #0
 8001c76:	9401      	str	r4, [sp, #4]
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	4816      	ldr	r0, [pc, #88]	; (8001cd4 <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c7c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
 8001c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c84:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001c88:	9201      	str	r2, [sp, #4]
 8001c8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	9402      	str	r4, [sp, #8]
 8001c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c90:	f042 0202 	orr.w	r2, r2, #2
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cac:	2103      	movs	r1, #3
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	a903      	add	r1, sp, #12
 8001cb6:	f7ff fb17 	bl	80012e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 1);
 8001cba:	2014      	movs	r0, #20
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	f7ff f92e 	bl	8000f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f7ff f95d 	bl	8000f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001cca:	b008      	add	sp, #32
 8001ccc:	bd10      	pop	{r4, pc}
 8001cce:	bf00      	nop
 8001cd0:	40006400 	.word	0x40006400
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cd8:	4770      	bx	lr

08001cda <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler>

08001cdc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler>

08001cde <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler>

08001ce0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler>

08001ce2 <SVC_Handler>:
 8001ce2:	4770      	bx	lr

08001ce4 <DebugMon_Handler>:
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce8:	f7fe bc28 	b.w	800053c <HAL_IncTick>

08001cec <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cec:	4801      	ldr	r0, [pc, #4]	; (8001cf4 <CAN1_RX0_IRQHandler+0x8>)
 8001cee:	f7ff b806 	b.w	8000cfe <HAL_CAN_IRQHandler>
 8001cf2:	bf00      	nop
 8001cf4:	2000011c 	.word	0x2000011c

08001cf8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cf8:	4801      	ldr	r0, [pc, #4]	; (8001d00 <DMA2_Stream0_IRQHandler+0x8>)
 8001cfa:	f7ff ba37 	b.w	800116c <HAL_DMA_IRQHandler>
 8001cfe:	bf00      	nop
 8001d00:	200000bc 	.word	0x200000bc

08001d04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	490f      	ldr	r1, [pc, #60]	; (8001d44 <SystemInit+0x40>)
 8001d06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <SystemInit+0x44>)
 8001d14:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d16:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001d1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <SystemInit+0x48>)
 8001d2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d38:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d3e:	608b      	str	r3, [r1, #8]
#endif
}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	24003010 	.word	0x24003010

08001d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d56:	e003      	b.n	8001d60 <LoopCopyDataInit>

08001d58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d5e:	3104      	adds	r1, #4

08001d60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d68:	d3f6      	bcc.n	8001d58 <CopyDataInit>
  ldr  r2, =_sbss
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d6c:	e002      	b.n	8001d74 <LoopFillZerobss>

08001d6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d70:	f842 3b04 	str.w	r3, [r2], #4

08001d74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d78:	d3f9      	bcc.n	8001d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d7a:	f7ff ffc3 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f000 f811 	bl	8001da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d82:	f7ff fe4b 	bl	8001a1c <main>
  bx  lr    
 8001d86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d8c:	08001e3c 	.word	0x08001e3c
  ldr  r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d94:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001d98:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001d9c:	20000144 	.word	0x20000144

08001da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC_IRQHandler>
	...

08001da4 <__libc_init_array>:
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	4d0d      	ldr	r5, [pc, #52]	; (8001ddc <__libc_init_array+0x38>)
 8001da8:	4c0d      	ldr	r4, [pc, #52]	; (8001de0 <__libc_init_array+0x3c>)
 8001daa:	1b64      	subs	r4, r4, r5
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	2600      	movs	r6, #0
 8001db0:	42a6      	cmp	r6, r4
 8001db2:	d109      	bne.n	8001dc8 <__libc_init_array+0x24>
 8001db4:	4d0b      	ldr	r5, [pc, #44]	; (8001de4 <__libc_init_array+0x40>)
 8001db6:	4c0c      	ldr	r4, [pc, #48]	; (8001de8 <__libc_init_array+0x44>)
 8001db8:	f000 f820 	bl	8001dfc <_init>
 8001dbc:	1b64      	subs	r4, r4, r5
 8001dbe:	10a4      	asrs	r4, r4, #2
 8001dc0:	2600      	movs	r6, #0
 8001dc2:	42a6      	cmp	r6, r4
 8001dc4:	d105      	bne.n	8001dd2 <__libc_init_array+0x2e>
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dcc:	4798      	blx	r3
 8001dce:	3601      	adds	r6, #1
 8001dd0:	e7ee      	b.n	8001db0 <__libc_init_array+0xc>
 8001dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd6:	4798      	blx	r3
 8001dd8:	3601      	adds	r6, #1
 8001dda:	e7f2      	b.n	8001dc2 <__libc_init_array+0x1e>
 8001ddc:	08001e34 	.word	0x08001e34
 8001de0:	08001e34 	.word	0x08001e34
 8001de4:	08001e34 	.word	0x08001e34
 8001de8:	08001e38 	.word	0x08001e38

08001dec <memset>:
 8001dec:	4402      	add	r2, r0
 8001dee:	4603      	mov	r3, r0
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d100      	bne.n	8001df6 <memset+0xa>
 8001df4:	4770      	bx	lr
 8001df6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfa:	e7f9      	b.n	8001df0 <memset+0x4>

08001dfc <_init>:
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	bf00      	nop
 8001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e02:	bc08      	pop	{r3}
 8001e04:	469e      	mov	lr, r3
 8001e06:	4770      	bx	lr

08001e08 <_fini>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr
